{"version":3,"mappings":"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","names":["awmfLogo","baekLogo","kbvLogo","appServicesAuthTokenUrl","appServicesAuthTokenRefreshUrl","appServicesAuthLogoutUrl","fetchAuthSetup","response","authSetup","useLogin","requireAccessControl","enableUnauthenticatedAccess","requireLogin","msalConfig","loginRequest","tokenRequest","getRedirectUri","getAppServicesToken","checkNotExpired","appServicesToken","currentDate","getAppServicesTokenFromMe","r","json","acc","item","token","isUsingAppServicesLogin","appServicesLogout","checkLoggedIn","client","getToken","error","getUsername","activeAccount","getTokenClaims","BACKEND_URI","getHeaders","idToken","configApi","chatApi","request","shouldStream","url","headers","getSpeechApi","text","blob","getCitationFilePath","citation","uploadFileApi","deleteUploadedFileApi","filename","listUploadedFilesApi","postChatHistoryApi","getChatHistoryListApi","count","continuationToken","getChatHistoryApi","id","deleteChatHistoryApi","RetrievalMode","GPT4VInput","VectorFieldOptions","formatCitationForDisplay","pageHash","processedFilename","cleanName","pageNum","isCitationValid","contextDataPoints","citationCandidate","dataPointsArray","dataPoint","parseAnswerToHtml","answer","isStreaming","onCitationClicked","citations","parsedAnswer","lastIndex","i","part","index","citationIndex","path","renderToStaticMarkup","jsx","supportedLngs","i18next","HttpApi","LanguageDetector","initReactI18next","daTranslation","deTranslation","enTranslation","esTranslation","frTranslation","jaTranslation","nlTranslation","ptBRTranslation","trTranslation","SpeechSynthesis","synth","getUtterance","lngCode","utterance","voice","SpeechOutputBrowser","i18n","useTranslation","currentLng","isPlaying","setIsPlaying","useState","startOrStopSpeech","color","IconButton","SpeechOutputAzure","speechConfig","isLoading","setIsLoading","localPlayingState","setLocalPlayingState","t","playAudio","speechUrl","jsxs","Fragment","Answer","isSelected","onSupportingContentClicked","onFollowupQuestionClicked","showFollowupQuestions","showSpeechOutputAzure","showSpeechOutputBrowser","followupQuestions","useMemo","sanitizedAnswerHtml","DOMPurify","copied","setCopied","handleCopy","textToCopy","err","Stack","styles","ReactMarkdown","rehypeRaw","remarkGfm","x","displayName","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","onRetry","ErrorCircle24Regular","PrimaryButton","useCustomSpeechRecognition","SpeechRecognition","speechRecognition","SpeechInput","updateQuestion","isRecording","setIsRecording","startRecording","event","input","result","stopRecording","Tooltip","Button","Mic28Filled","LoginContext","createContext","_","QuestionInput","onSend","disabled","placeholder","clearOnSend","initQuestion","showSpeechInput","question","setQuestion","loggedIn","useContext","isComposing","setIsComposing","useEffect","sendQuestion","onEnterPress","ev","handleCompositionStart","handleCompositionEnd","onQuestionChange","_ev","newValue","disableRequiredAccessControl","sendQuestionDisabled","TextField","Send28Filled","Example","value","onClick","ExampleList","onExampleClicked","useGPT4V","DEFAULT_EXAMPLES","GPT4V_EXAMPLES","DEFAULT_PHRASES","GPT4V_PHRASES","examples","phrases","UserChatMessage","message","parseSupportingContentItem","parts","title","content","SupportingContent","supportingContent","textItems","imageItems","c","ind","parsed","img","AnalysisPanelTabs","MarkdownViewer","src","setContent","setError","removeAnchorLinks","markdown","ancorLinksRegex","markdownText","Spinner","SpinnerSize","MessageBar","MessageBarType","Link","pivotItemDisabledStyle","AnalysisPanel","activeTab","activeCitation","citationHeight","className","onActiveTabChanged","isDisabledSupportingContentTab","isDisabledCitationTab","setCitation","useMsal","fetchCitation","originalHash","citationContent","citationObjectUrl","renderFileViewer","Pivot","pivotItem","PivotItem","HistoryItem","onSelect","onDelete","isModalOpen","setIsModalOpen","handleDelete","useCallback","Delete24Regular","DeleteHistoryModal","isOpen","onClose","onConfirm","DefaultButton","HistoryProviderOptions","NoneProvider","answers","IndexedDBProvider","dbName","storeName","openDB","db","cursor","loadedItems","timestamp","tx","current","CosmosDBProvider","e","useHistoryManager","provider","HISTORY_COUNT_PER_LOAD","HistoryPanel","notify","onChatSelected","historyManager","history","setHistory","hasMoreHistory","setHasMoreHistory","loadMoreHistory","items","prevHistory","handleSelect","groupedHistory","groupHistory","Panel","PanelType","group","InfiniteLoadingButton","today","yesterday","lastWeek","lastMonth","groups","itemDate","func","buttonRef","useRef","observer","entries","entry","HistoryButton","History24Regular","UploadFile","isCalloutVisible","setIsCalloutVisible","isUploading","setIsUploading","deletionStatus","setDeletionStatus","uploadedFile","setUploadedFile","uploadedFileError","setUploadedFileError","uploadedFiles","setUploadedFiles","handleButtonClick","listUploadedFiles","files","handleRemoveFile","handleUploadFile","file","formData","Add24Regular","Callout","Label","Text","TokenClaimsDisplay","instance","claims","setClaims","ToString","a","o","key","originalKey","columns","createTableColumn","b","DataGrid","DataGridHeader","DataGridRow","renderHeaderCell","DataGridHeaderCell","DataGridBody","rowId","renderCell","DataGridCell","LanguagePicker","onLanguageChange","handleLanguageChange","option","languagePickerId","useId","LocalLanguage24Regular","Dropdown","code","details","stackTokens","labelCalloutStackStyles","iconButtonStyles","iconProps","HelpCallout","props","toggleIsCalloutVisible","useBoolean","descriptionId","iconButtonId","GPT4VSettings","updateGPT4VInputs","updateUseGPT4V","isUseGPT4V","gpt4vInputs","setUseGPT4V","vectorFieldOption","setVectorFieldOption","onuseGPT4V","checked","onSetGPT4VInput","data","useGPT4VId","useGPT4VFieldId","gpt4VInputId","gpt4VInputFieldId","Checkbox","VectorSettings","updateRetrievalMode","updateVectorFields","showImageOptions","defaultRetrievalMode","retrievalMode","setRetrievalMode","onRetrievalModeChange","onVectorFieldsChange","retrievalModeId","retrievalModeFieldId","vectorFieldsId","vectorFieldsFieldId","Settings","promptTemplate","temperature","retrieveCount","seed","minimumSearchScore","minimumRerankerScore","useSemanticRanker","useSemanticCaptions","excludeCategory","includeCategory","gpt4vInput","vectorFieldList","showSemanticRankerOption","showGPT4VOptions","showVectorOption","useOidSecurityFilter","useGroupsSecurityFilter","onChange","useSuggestFollowupQuestions","promptTemplatePrefix","promptTemplateSuffix","showSuggestFollowupQuestions","promptTemplateId","promptTemplateFieldId","temperatureId","temperatureFieldId","seedId","seedFieldId","searchScoreId","searchScoreFieldId","rerankerScoreId","rerankerScoreFieldId","retrieveCountId","retrieveCountFieldId","includeCategoryId","includeCategoryFieldId","excludeCategoryId","excludeCategoryFieldId","semanticRankerId","semanticRankerFieldId","semanticCaptionsId","semanticCaptionsFieldId","useOidSecurityFilterId","useOidSecurityFilterFieldId","useGroupsSecurityFilterId","useGroupsSecurityFilterFieldId","shouldStreamId","shouldStreamFieldId","suggestFollowupQuestionsId","suggestFollowupQuestionsFieldId","renderLabel","labelId","fieldId","helpText","val","TypewriterEffect","typingSpeed","deletingSpeed","delayAfterType","delayAfterDelete","currentText","setCurrentText","isDeleting","setIsDeleting","phraseIndex","setPhraseIndex","timeoutRef","showCursor","setShowCursor","currentPhrase","prevIndex","chariteLogo","LoginButton","setLoggedIn","username","setUsername","handleLoginPopup","handleLogoutPopup","ClearChatButton","SettingsButton","Settings24Regular","LayoutContext","React","Layout","menuOpen","setMenuOpen","menuRef","clearChatFunction","setClearChatFunction","openSettingsFunction","setOpenSettingsFunction","toggleMenu","handleClickOutside","handleClearChat","handleOpenSettings","Outlet","Chat","isConfigPanelOpen","setIsConfigPanelOpen","isHistoryPanelOpen","setIsHistoryPanelOpen","setPromptTemplate","setTemperature","setSeed","setMinimumRerankerScore","setMinimumSearchScore","setRetrieveCount","setUseSemanticRanker","setShouldStream","setUseSemanticCaptions","setIncludeCategory","setExcludeCategory","setUseSuggestFollowupQuestions","setVectorFieldList","setUseOidSecurityFilter","setUseGroupsSecurityFilter","setGPT4VInput","lastQuestionRef","chatMessageStreamEnd","setIsStreaming","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","selectedAnswer","setSelectedAnswer","setAnswers","streamedAnswers","setStreamedAnswers","speechUrls","setSpeechUrls","setShowGPT4VOptions","setShowSemanticRankerOption","setShowVectorOption","showUserUpload","setShowUserUpload","showLanguagePicker","setshowLanguagePicker","setShowSpeechInput","setShowSpeechOutputBrowser","setShowSpeechOutputAzure","showChatHistoryBrowser","setShowChatHistoryBrowser","showChatHistoryCosmos","setShowChatHistoryCosmos","audio","getConfig","config","handleAsyncRequest","responseBody","askResponse","updateState","newContent","resolve","latestResponse","readNDJSONStream","historyProvider","makeApiRequest","parsedResponse","clearChat","handleSettingsChange","field","example","onShowCitation","onToggleTab","tab","Helmet","streamedAnswer","q","newLang","LayoutWrapper","msalInstance","PublicClientApplication","EventType","account","MsalProvider","initializeIcons","router","createHashRouter","__vitePreload","ReactDOM","I18nextProvider","HelmetProvider","RouterProvider"],"ignoreList":[],"sources":["../../../frontend/src/assets/1.png","../../../frontend/src/assets/2.png","../../../frontend/src/assets/3.png","../../../frontend/src/authConfig.ts","../../../frontend/src/api/api.ts","../../../frontend/src/api/models.ts","../../../frontend/src/components/Answer/citations.ts","../../../frontend/src/components/Answer/AnswerParser.tsx","../../../frontend/src/i18n/config.ts","../../../frontend/src/components/Answer/SpeechOutputBrowser.tsx","../../../frontend/src/components/Answer/SpeechOutputAzure.tsx","../../../frontend/src/components/Answer/Answer.tsx","../../../frontend/src/components/Answer/AnswerLoading.tsx","../../../frontend/src/components/Answer/AnswerError.tsx","../../../frontend/src/components/QuestionInput/SpeechInput.tsx","../../../frontend/src/loginContext.tsx","../../../frontend/src/components/QuestionInput/QuestionInput.tsx","../../../frontend/src/components/Example/Example.tsx","../../../frontend/src/components/Example/ExampleList.tsx","../../../frontend/src/components/UserChatMessage/UserChatMessage.tsx","../../../frontend/src/components/SupportingContent/SupportingContentParser.ts","../../../frontend/src/components/SupportingContent/SupportingContent.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../../frontend/src/components/MarkdownViewer/MarkdownViewer.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanel.tsx","../../../frontend/src/components/HistoryItem/HistoryItem.tsx","../../../frontend/src/components/HistoryProviders/IProvider.ts","../../../frontend/src/components/HistoryProviders/None.ts","../../../frontend/src/components/HistoryProviders/IndexedDB.ts","../../../frontend/src/components/HistoryProviders/CosmosDB.ts","../../../frontend/src/components/HistoryProviders/HistoryManager.ts","../../../frontend/src/components/HistoryPanel/HistoryPanel.tsx","../../../frontend/src/components/HistoryButton/HistoryButton.tsx","../../../frontend/src/components/UploadFile/UploadFile.tsx","../../../frontend/src/components/TokenClaimsDisplay/TokenClaimsDisplay.tsx","../../../frontend/src/i18n/LanguagePicker.tsx","../../../frontend/src/components/HelpCallout/HelpCallout.tsx","../../../frontend/src/components/GPT4VSettings/GPT4VSettings.tsx","../../../frontend/src/components/VectorSettings/VectorSettings.tsx","../../../frontend/src/components/Settings/Settings.tsx","../../../frontend/src/components/TypewriterEffect/TypewriterEffect.tsx","../../../frontend/src/assets/221215_Charite_Wortbildmarke_oU_RGB.svg","../../../frontend/src/components/LoginButton/LoginButton.tsx","../../../frontend/src/components/ClearChatButton/ClearChatButton.tsx","../../../frontend/src/components/SettingsButton/SettingsButton.tsx","../../../frontend/src/pages/layout/Layout.tsx","../../../frontend/src/pages/chat/Chat.tsx","../../../frontend/src/layoutWrapper.tsx","../../../frontend/src/index.tsx"],"sourcesContent":["export default \"__VITE_ASSET__C3x_Zge$__\"","export default \"__VITE_ASSET__CPFU07EA__\"","export default \"__VITE_ASSET__DqiIF01J__\"","// Refactored from https://github.com/Azure-Samples/ms-identity-javascript-react-tutorial/blob/main/1-Authentication/1-sign-in/SPA/src/authConfig.js\n\nimport { IPublicClientApplication } from \"@azure/msal-browser\";\n\nconst appServicesAuthTokenUrl = \".auth/me\";\nconst appServicesAuthTokenRefreshUrl = \".auth/refresh\";\nconst appServicesAuthLogoutUrl = \".auth/logout?post_logout_redirect_uri=/\";\n\ninterface AppServicesToken {\n    id_token: string;\n    access_token: string;\n    user_claims: Record<string, any>;\n    expires_on: string;\n}\n\ninterface AuthSetup {\n    // Set to true if login elements should be shown in the UI\n    useLogin: boolean;\n    // Set to true if access control is enforced by the application\n    requireAccessControl: boolean;\n    // Set to true if the application allows unauthenticated access (only applies for documents without access control)\n    enableUnauthenticatedAccess: boolean;\n    /**\n     * Configuration object to be passed to MSAL instance on creation.\n     * For a full list of MSAL.js configuration parameters, visit:\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\n     */\n    msalConfig: {\n        auth: {\n            clientId: string; // Client app id used for login\n            authority: string; // Directory to use for login https://learn.microsoft.com/entra/identity-platform/msal-client-application-configuration#authority\n            redirectUri: string; // Points to window.location.origin. You must register this URI on Azure Portal/App Registration.\n            postLogoutRedirectUri: string; // Indicates the page to navigate after logout.\n            navigateToLoginRequestUrl: boolean; // If \"true\", will navigate back to the original request location before processing the auth code response.\n        };\n        cache: {\n            cacheLocation: string; // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\n            storeAuthStateInCookie: boolean; // Set this to \"true\" if you are having issues on IE11 or Edge\n        };\n    };\n    loginRequest: {\n        /**\n         * Scopes you add here will be prompted for user consent during sign-in.\n         * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n         * For more information about OIDC scopes, visit:\n         * https://learn.microsoft.com/entra/identity-platform/permissions-consent-overview#openid-connect-scopes\n         */\n        scopes: Array<string>;\n    };\n    tokenRequest: {\n        scopes: Array<string>;\n    };\n}\n\n// Fetch the auth setup JSON data from the API if not already cached\nasync function fetchAuthSetup(): Promise<AuthSetup> {\n    const response = await fetch(\"/auth_setup\");\n    if (!response.ok) {\n        throw new Error(`auth setup response was not ok: ${response.status}`);\n    }\n    return await response.json();\n}\n\nconst authSetup = await fetchAuthSetup();\n\nexport const useLogin = authSetup.useLogin;\n\nexport const requireAccessControl = authSetup.requireAccessControl;\n\nexport const enableUnauthenticatedAccess = authSetup.enableUnauthenticatedAccess;\n\nexport const requireLogin = requireAccessControl && !enableUnauthenticatedAccess;\n\n/**\n * Configuration object to be passed to MSAL instance on creation.\n * For a full list of MSAL.js configuration parameters, visit:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\n */\nexport const msalConfig = authSetup.msalConfig;\n\n/**\n * Scopes you add here will be prompted for user consent during sign-in.\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n * For more information about OIDC scopes, visit:\n * https://learn.microsoft.com/entra/identity-platform/permissions-consent-overview#openid-connect-scopes\n */\nexport const loginRequest = authSetup.loginRequest;\n\nconst tokenRequest = authSetup.tokenRequest;\n\n// Build an absolute redirect URI using the current window's location and the relative redirect URI from auth setup\nexport const getRedirectUri = () => {\n    return window.location.origin + authSetup.msalConfig.auth.redirectUri;\n};\n\n// Cache the app services token if it's available\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this#global_context\ndeclare global {\n    var cachedAppServicesToken: AppServicesToken | null;\n}\nglobalThis.cachedAppServicesToken = null;\n\n/**\n * Retrieves an access token if the user is logged in using app services authentication.\n * Checks if the current token is expired and fetches a new token if necessary.\n * Returns null if the app doesn't support app services authentication.\n *\n * @returns {Promise<AppServicesToken | null>} A promise that resolves to an AppServicesToken if the user is authenticated, or null if authentication is not supported or fails.\n */\nconst getAppServicesToken = (): Promise<AppServicesToken | null> => {\n    const checkNotExpired = (appServicesToken: AppServicesToken) => {\n        const currentDate = new Date();\n        const expiresOnDate = new Date(appServicesToken.expires_on);\n        return expiresOnDate > currentDate;\n    };\n\n    if (globalThis.cachedAppServicesToken && checkNotExpired(globalThis.cachedAppServicesToken)) {\n        return Promise.resolve(globalThis.cachedAppServicesToken);\n    }\n\n    const getAppServicesTokenFromMe: () => Promise<AppServicesToken | null> = () => {\n        return fetch(appServicesAuthTokenUrl).then(r => {\n            if (r.ok) {\n                return r.json().then(json => {\n                    if (json.length > 0) {\n                        return {\n                            id_token: json[0][\"id_token\"] as string,\n                            access_token: json[0][\"access_token\"] as string,\n                            user_claims: json[0][\"user_claims\"].reduce((acc: Record<string, any>, item: Record<string, any>) => {\n                                acc[item.typ] = item.val;\n                                return acc;\n                            }, {}) as Record<string, any>,\n                            expires_on: json[0][\"expires_on\"] as string\n                        } as AppServicesToken;\n                    }\n\n                    return null;\n                });\n            }\n\n            return null;\n        });\n    };\n\n    return getAppServicesTokenFromMe().then(token => {\n        if (token) {\n            if (checkNotExpired(token)) {\n                globalThis.cachedAppServicesToken = token;\n                return token;\n            }\n\n            return fetch(appServicesAuthTokenRefreshUrl).then(r => {\n                if (r.ok) {\n                    return getAppServicesTokenFromMe();\n                }\n                return null;\n            });\n        }\n\n        return null;\n    });\n};\n\nexport const isUsingAppServicesLogin = (await getAppServicesToken()) != null;\n\n// Sign out of app services\n// Learn more at https://learn.microsoft.com/azure/app-service/configure-authentication-customize-sign-in-out#sign-out-of-a-session\nexport const appServicesLogout = () => {\n    window.location.href = appServicesAuthLogoutUrl;\n};\n\n/**\n * Determines if the user is logged in either via the MSAL public client application or the app services login.\n * @param {IPublicClientApplication | undefined} client - The MSAL public client application instance, or undefined if not available.\n * @returns {Promise<boolean>} A promise that resolves to true if the user is logged in, false otherwise.\n */\nexport const checkLoggedIn = async (client: IPublicClientApplication | undefined): Promise<boolean> => {\n    if (client) {\n        const activeAccount = client.getActiveAccount();\n        if (activeAccount) {\n            return true;\n        }\n    }\n\n    const appServicesToken = await getAppServicesToken();\n    if (appServicesToken) {\n        return true;\n    }\n\n    return false;\n};\n\n// Get an access token for use with the API server.\n// ID token received when logging in may not be used for this purpose because it has the incorrect audience\n// Use the access token from app services login if available\nexport const getToken = async (client: IPublicClientApplication): Promise<string | undefined> => {\n    const appServicesToken = await getAppServicesToken();\n    if (appServicesToken) {\n        return Promise.resolve(appServicesToken.access_token);\n    }\n\n    return client\n        .acquireTokenSilent({\n            ...tokenRequest,\n            redirectUri: getRedirectUri()\n        })\n        .then(r => r.accessToken)\n        .catch(error => {\n            console.log(error);\n            return undefined;\n        });\n};\n\n/**\n * Retrieves the username of the active account.\n * If no active account is found, attempts to retrieve the username from the app services login token if available.\n * @param {IPublicClientApplication} client - The MSAL public client application instance.\n * @returns {Promise<string | null>} The username of the active account, or null if no username is found.\n */\nexport const getUsername = async (client: IPublicClientApplication): Promise<string | null> => {\n    const activeAccount = client.getActiveAccount();\n    if (activeAccount) {\n        return activeAccount.username;\n    }\n\n    const appServicesToken = await getAppServicesToken();\n    if (appServicesToken?.user_claims) {\n        return appServicesToken.user_claims.preferred_username;\n    }\n\n    return null;\n};\n\n/**\n * Retrieves the token claims of the active account.\n * If no active account is found, attempts to retrieve the token claims from the app services login token if available.\n * @param {IPublicClientApplication} client - The MSAL public client application instance.\n * @returns {Promise<Record<string, unknown> | undefined>} A promise that resolves to the token claims of the active account, the user claims from the app services login token, or undefined if no claims are found.\n */\nexport const getTokenClaims = async (client: IPublicClientApplication): Promise<Record<string, unknown> | undefined> => {\n    const activeAccount = client.getActiveAccount();\n    if (activeAccount) {\n        return activeAccount.idTokenClaims;\n    }\n\n    const appServicesToken = await getAppServicesToken();\n    if (appServicesToken) {\n        return appServicesToken.user_claims;\n    }\n\n    return undefined;\n};\n","const BACKEND_URI = \"\";\n\nimport { ChatAppResponse, ChatAppResponseOrError, ChatAppRequest, Config, SimpleAPIResponse, HistoryListApiResponse, HistroyApiResponse } from \"./models\";\nimport { useLogin, getToken, isUsingAppServicesLogin } from \"../authConfig\";\n\nexport async function getHeaders(idToken: string | undefined): Promise<Record<string, string>> {\n    // If using login and not using app services, add the id token of the logged in account as the authorization\n    if (useLogin && !isUsingAppServicesLogin) {\n        if (idToken) {\n            return { Authorization: `Bearer ${idToken}` };\n        }\n    }\n\n    return {};\n}\n\nexport async function configApi(): Promise<Config> {\n    const response = await fetch(`${BACKEND_URI}/config`, {\n        method: \"GET\"\n    });\n\n    return (await response.json()) as Config;\n}\n\nexport async function askApi(request: ChatAppRequest, idToken: string | undefined): Promise<ChatAppResponse> {\n    const headers = await getHeaders(idToken);\n    const response = await fetch(`${BACKEND_URI}/ask`, {\n        method: \"POST\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(request)\n    });\n\n    if (response.status > 299 || !response.ok) {\n        throw Error(`Request failed with status ${response.status}`);\n    }\n    const parsedResponse: ChatAppResponseOrError = await response.json();\n    if (parsedResponse.error) {\n        throw Error(parsedResponse.error);\n    }\n\n    return parsedResponse as ChatAppResponse;\n}\n\nexport async function chatApi(request: ChatAppRequest, shouldStream: boolean, idToken: string | undefined): Promise<Response> {\n    let url = `${BACKEND_URI}/chat`;\n    if (shouldStream) {\n        url += \"/stream\";\n    }\n    const headers = await getHeaders(idToken);\n    return await fetch(url, {\n        method: \"POST\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(request)\n    });\n}\n\nexport async function getSpeechApi(text: string): Promise<string | null> {\n    return await fetch(\"/speech\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            text: text\n        })\n    })\n        .then(response => {\n            if (response.status == 200) {\n                return response.blob();\n            } else if (response.status == 400) {\n                console.log(\"Speech synthesis is not enabled.\");\n                return null;\n            } else {\n                console.error(\"Unable to get speech synthesis.\");\n                return null;\n            }\n        })\n        .then(blob => (blob ? URL.createObjectURL(blob) : null));\n}\n\nexport function getCitationFilePath(citation: string): string {\n    return `${BACKEND_URI}/content/${citation}`;\n}\n\nexport async function uploadFileApi(request: FormData, idToken: string): Promise<SimpleAPIResponse> {\n    const response = await fetch(\"/upload\", {\n        method: \"POST\",\n        headers: await getHeaders(idToken),\n        body: request\n    });\n\n    if (!response.ok) {\n        throw new Error(`Uploading files failed: ${response.statusText}`);\n    }\n\n    const dataResponse: SimpleAPIResponse = await response.json();\n    return dataResponse;\n}\n\nexport async function deleteUploadedFileApi(filename: string, idToken: string): Promise<SimpleAPIResponse> {\n    const headers = await getHeaders(idToken);\n    const response = await fetch(\"/delete_uploaded\", {\n        method: \"POST\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ filename })\n    });\n\n    if (!response.ok) {\n        throw new Error(`Deleting file failed: ${response.statusText}`);\n    }\n\n    const dataResponse: SimpleAPIResponse = await response.json();\n    return dataResponse;\n}\n\nexport async function listUploadedFilesApi(idToken: string): Promise<string[]> {\n    const response = await fetch(`/list_uploaded`, {\n        method: \"GET\",\n        headers: await getHeaders(idToken)\n    });\n\n    if (!response.ok) {\n        throw new Error(`Listing files failed: ${response.statusText}`);\n    }\n\n    const dataResponse: string[] = await response.json();\n    return dataResponse;\n}\n\nexport async function postChatHistoryApi(item: any, idToken: string): Promise<any> {\n    const headers = await getHeaders(idToken);\n    const response = await fetch(\"/chat_history\", {\n        method: \"POST\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(item)\n    });\n\n    if (!response.ok) {\n        throw new Error(`Posting chat history failed: ${response.statusText}`);\n    }\n\n    const dataResponse: any = await response.json();\n    return dataResponse;\n}\n\nexport async function getChatHistoryListApi(count: number, continuationToken: string | undefined, idToken: string): Promise<HistoryListApiResponse> {\n    const headers = await getHeaders(idToken);\n    const response = await fetch(\"/chat_history/items\", {\n        method: \"POST\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ count: count, continuation_token: continuationToken })\n    });\n\n    if (!response.ok) {\n        throw new Error(`Getting chat histories failed: ${response.statusText}`);\n    }\n\n    const dataResponse: HistoryListApiResponse = await response.json();\n    return dataResponse;\n}\n\nexport async function getChatHistoryApi(id: string, idToken: string): Promise<HistroyApiResponse> {\n    const headers = await getHeaders(idToken);\n    const response = await fetch(`/chat_history/items/${id}`, {\n        method: \"GET\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" }\n    });\n\n    if (!response.ok) {\n        throw new Error(`Getting chat history failed: ${response.statusText}`);\n    }\n\n    const dataResponse: HistroyApiResponse = await response.json();\n    return dataResponse;\n}\n\nexport async function deleteChatHistoryApi(id: string, idToken: string): Promise<any> {\n    const headers = await getHeaders(idToken);\n    const response = await fetch(`/chat_history/items/${id}`, {\n        method: \"DELETE\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" }\n    });\n\n    if (!response.ok) {\n        throw new Error(`Deleting chat history failed: ${response.statusText}`);\n    }\n\n    const dataResponse: any = await response.json();\n    return dataResponse;\n}\n","export const enum RetrievalMode {\n    Hybrid = \"hybrid\",\n    Vectors = \"vectors\",\n    Text = \"text\"\n}\n\nexport const enum GPT4VInput {\n    TextAndImages = \"textAndImages\",\n    Images = \"images\",\n    Texts = \"texts\"\n}\n\nexport const enum VectorFieldOptions {\n    Embedding = \"embedding\",\n    ImageEmbedding = \"imageEmbedding\",\n    Both = \"both\"\n}\n\nexport type ChatAppRequestOverrides = {\n    retrieval_mode?: RetrievalMode;\n    semantic_ranker?: boolean;\n    semantic_captions?: boolean;\n    include_category?: string;\n    exclude_category?: string;\n    seed?: number;\n    top?: number;\n    temperature?: number;\n    minimum_search_score?: number;\n    minimum_reranker_score?: number;\n    prompt_template?: string;\n    prompt_template_prefix?: string;\n    prompt_template_suffix?: string;\n    suggest_followup_questions?: boolean;\n    use_oid_security_filter?: boolean;\n    use_groups_security_filter?: boolean;\n    use_gpt4v?: boolean;\n    gpt4v_input?: GPT4VInput;\n    vector_fields: VectorFieldOptions[];\n    language: string;\n};\n\nexport type ResponseMessage = {\n    content: string;\n    role: string;\n};\n\nexport type Thoughts = {\n    title: string;\n    description: any; // It can be any output from the api\n    props?: { [key: string]: string };\n};\n\nexport type ResponseContext = {\n    data_points: string[];\n    followup_questions: string[] | null;\n    thoughts: Thoughts[];\n};\n\nexport type ChatAppResponseOrError = {\n    message: ResponseMessage;\n    delta: ResponseMessage;\n    context: ResponseContext;\n    session_state: any;\n    error?: string;\n};\n\nexport type ChatAppResponse = {\n    message: ResponseMessage;\n    delta: ResponseMessage;\n    context: ResponseContext;\n    session_state: any;\n};\n\nexport type ChatAppRequestContext = {\n    overrides?: ChatAppRequestOverrides;\n};\n\nexport type ChatAppRequest = {\n    messages: ResponseMessage[];\n    context?: ChatAppRequestContext;\n    session_state: any;\n};\n\nexport type Config = {\n    showGPT4VOptions: boolean;\n    showSemanticRankerOption: boolean;\n    showVectorOption: boolean;\n    showUserUpload: boolean;\n    showLanguagePicker: boolean;\n    showSpeechInput: boolean;\n    showSpeechOutputBrowser: boolean;\n    showSpeechOutputAzure: boolean;\n    showChatHistoryBrowser: boolean;\n    showChatHistoryCosmos: boolean;\n};\n\nexport type SimpleAPIResponse = {\n    message?: string;\n};\n\nexport interface SpeechConfig {\n    speechUrls: (string | null)[];\n    setSpeechUrls: (urls: (string | null)[]) => void;\n    audio: HTMLAudioElement;\n    isPlaying: boolean;\n    setIsPlaying: (isPlaying: boolean) => void;\n}\n\nexport type HistoryListApiResponse = {\n    items: {\n        id: string;\n        entra_oid: string;\n        title: string;\n        timestamp: number;\n    }[];\n    continuation_token?: string;\n};\n\nexport type HistroyApiResponse = {\n    id: string;\n    entra_oid: string;\n    title: string;\n    answers: any;\n    timestamp: number;\n};\n","export function formatCitationForDisplay(citation: string): string {\n    if (!citation) return \"\";\n\n    // Split by hash to separate filename and page\n    const [filename, pageHash] = citation.split(\"#\");\n\n    // Special case handling: map copd.pdf to its original name\n    let processedFilename = filename;\n    if (filename.toLowerCase().includes(\"copd.pdf\")) {\n        processedFilename = \"nvl-003l_S3_COPD_2024-12.pdf\";\n    }\n\n    // Extract base filename without path and initial numbers/special chars\n    const cleanName = processedFilename\n        .split(\"/\")\n        .pop()\n        ?.replace(/^\\d+-\\d+[a-z]?_/, \"\")\n        ?.replace(/^nvl-\\d+[a-z]?_?/, \"\");\n\n    // Get page number if it exists\n    const pageNum = pageHash?.replace(\"page=\", \"\") || \"1\";\n\n    // Remove file extension\n    const nameWithoutExt = cleanName?.replace(/\\.[^/.]+$/, \"\");\n\n    // Replace underscores with spaces and construct final format\n    return `${nameWithoutExt?.replace(/_/g, \" \")} Seite ${pageNum}`;\n}\n","import { renderToStaticMarkup } from \"react-dom/server\";\nimport { ChatAppResponse, getCitationFilePath } from \"../../api\";\nimport { formatCitationForDisplay } from \"./citations\";\n\ntype HtmlParsedAnswer = {\n    answerHtml: string;\n    citations: string[];\n};\n\n// Function to validate citation format and check if dataPoint starts with possible citation\nfunction isCitationValid(contextDataPoints: any, citationCandidate: string): boolean {\n    const regex = /.+\\.\\w{1,}(?:#\\S*)?$/;\n    if (!regex.test(citationCandidate)) {\n        return false;\n    }\n\n    // Check if contextDataPoints is an object with a text property that is an array\n    let dataPointsArray: string[];\n    if (Array.isArray(contextDataPoints)) {\n        dataPointsArray = contextDataPoints;\n    } else if (contextDataPoints && Array.isArray(contextDataPoints.text)) {\n        dataPointsArray = contextDataPoints.text;\n    } else {\n        return false;\n    }\n\n    const isValidCitation = dataPointsArray.some(dataPoint => {\n        return dataPoint.startsWith(citationCandidate);\n    });\n\n    return isValidCitation;\n}\n\nexport function parseAnswerToHtml(answer: ChatAppResponse, isStreaming: boolean, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\n    const contextDataPoints = answer.context.data_points;\n    const citations: string[] = [];\n\n    // Trim any whitespace from the end of the answer after removing follow-up questions\n    let parsedAnswer = answer.message.content.trim();\n\n    // Omit a citation that is still being typed during streaming\n    if (isStreaming) {\n        let lastIndex = parsedAnswer.length;\n        for (let i = parsedAnswer.length - 1; i >= 0; i--) {\n            if (parsedAnswer[i] === \"]\") {\n                break;\n            } else if (parsedAnswer[i] === \"[\") {\n                lastIndex = i;\n                break;\n            }\n        }\n        const truncatedAnswer = parsedAnswer.substring(0, lastIndex);\n        parsedAnswer = truncatedAnswer;\n    }\n\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\n\n    const fragments: string[] = parts.map((part, index) => {\n        if (index % 2 === 0) {\n            return part;\n        } else {\n            let citationIndex: number;\n\n            if (!isCitationValid(contextDataPoints, part)) {\n                return `[${part}]`;\n            }\n\n            if (citations.indexOf(part) !== -1) {\n                citationIndex = citations.indexOf(part) + 1;\n            } else {\n                citations.push(part);\n                citationIndex = citations.length;\n            }\n\n            const path = getCitationFilePath(part);\n\n            return renderToStaticMarkup(\n                <a className=\"supContainer\" title={formatCitationForDisplay(part)} onClick={() => onCitationClicked(path)}>\n                    <sup>{citationIndex}</sup>\n                </a>\n            );\n        }\n    });\n\n    return {\n        answerHtml: fragments.join(\"\"),\n        citations\n    };\n}\n","import i18next from \"i18next\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport HttpApi from \"i18next-http-backend\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport daTranslation from \"../locales/da/translation.json\";\nimport enTranslation from \"../locales/en/translation.json\";\nimport esTranslation from \"../locales/es/translation.json\";\nimport frTranslation from \"../locales/fr/translation.json\";\nimport jaTranslation from \"../locales/ja/translation.json\";\nimport nlTranslation from \"../locales/nl/translation.json\";\nimport ptBRTranslation from \"../locales/ptBR/translation.json\";\nimport trTranslation from \"../locales/tr/translation.json\";\nimport deTranslation from \"../locales/de/translation.json\";\n\nexport const supportedLngs: { [key: string]: { name: string; locale: string } } = {\n    da: {\n        name: \"Dansk\",\n        locale: \"da-DK\"\n    },\n    de: {\n        name: \"Deutsch\",\n        locale: \"de-DE\"\n    },\n    en: {\n        name: \"English\",\n        locale: \"en-US\"\n    },\n    es: {\n        name: \"Español\",\n        locale: \"es-ES\"\n    },\n    fr: {\n        name: \"Français\",\n        locale: \"fr-FR\"\n    },\n    ja: {\n        name: \"日本語\",\n        locale: \"ja-JP\"\n    },\n    nl: {\n        name: \"Nederlands\",\n        locale: \"nl-NL\"\n    },\n    ptBR: {\n        name: \"Português Brasileiro\",\n        locale: \"pt-BR\"\n    },\n    tr: {\n        name: \"Türkçe\",\n        locale: \"tr-TR\"\n    }\n};\n\ni18next\n    .use(HttpApi)\n    .use(LanguageDetector)\n    .use(initReactI18next)\n    // init i18next\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init({\n        resources: {\n            da: { translation: daTranslation },\n            de: { translation: deTranslation },\n            en: { translation: enTranslation },\n            es: { translation: esTranslation },\n            fr: { translation: frTranslation },\n            ja: { translation: jaTranslation },\n            nl: { translation: nlTranslation },\n            ptBR: { translation: ptBRTranslation },\n            tr: { translation: trTranslation }\n        },\n        fallbackLng: \"de\",\n        lng: \"de\",\n        supportedLngs: Object.keys(supportedLngs),\n        debug: import.meta.env.DEV,\n        interpolation: {\n            escapeValue: false // not needed for react as it escapes by default\n        }\n    });\n\nexport default i18next;\n","import { useState } from \"react\";\nimport { IconButton } from \"@fluentui/react\";\nimport { useTranslation } from \"react-i18next\";\nimport { supportedLngs } from \"../../i18n/config\";\n\ninterface Props {\n    answer: string;\n}\n\nconst SpeechSynthesis = (window as any).speechSynthesis || (window as any).webkitSpeechSynthesis;\n\nlet synth: SpeechSynthesis | null = null;\n\ntry {\n    synth = SpeechSynthesis;\n} catch (err) {\n    console.error(\"SpeechSynthesis is not supported\");\n}\n\nconst getUtterance = function (text: string, lngCode: string = \"en-US\") {\n    if (synth) {\n        const utterance = new SpeechSynthesisUtterance(text);\n        utterance.lang = lngCode;\n        utterance.volume = 1;\n        utterance.rate = 1;\n        utterance.pitch = 1;\n\n        let voice = synth.getVoices().filter((voice: SpeechSynthesisVoice) => voice.lang === lngCode)[0];\n        if (!voice) {\n            voice = synth.getVoices().filter((voice: SpeechSynthesisVoice) => voice.lang === \"en-US\")[0];\n        }\n\n        utterance.voice = voice;\n        return utterance;\n    }\n};\n\nexport const SpeechOutputBrowser = ({ answer }: Props) => {\n    const { t, i18n } = useTranslation();\n    const currentLng = i18n.language;\n    let lngCode = supportedLngs[currentLng]?.locale;\n    if (!lngCode) {\n        lngCode = \"en-US\";\n    }\n    const [isPlaying, setIsPlaying] = useState<boolean>(false);\n\n    const startOrStopSpeech = (answer: string) => {\n        if (synth != null) {\n            if (isPlaying) {\n                synth.cancel(); // removes all utterances from the utterance queue.\n                setIsPlaying(false);\n                return;\n            }\n            const utterance: SpeechSynthesisUtterance | undefined = getUtterance(answer, lngCode);\n\n            if (!utterance) {\n                return;\n            }\n\n            synth.speak(utterance);\n\n            utterance.onstart = () => {\n                setIsPlaying(true);\n                return;\n            };\n\n            utterance.onend = () => {\n                setIsPlaying(false);\n                return;\n            };\n        }\n    };\n    const color = isPlaying ? \"red\" : \"black\";\n\n    return (\n        <IconButton\n            style={{ color: color }}\n            iconProps={{ iconName: \"Volume3\" }}\n            title={t(\"tooltips.speakAnswer\")}\n            ariaLabel={t(\"tooltips.speakAnswer\")}\n            onClick={() => startOrStopSpeech(answer)}\n            disabled={!synth}\n        />\n    );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { IconButton } from \"@fluentui/react\";\nimport { getSpeechApi, SpeechConfig } from \"../../api\";\n\ninterface Props {\n    answer: string;\n    speechConfig: SpeechConfig;\n    index: number;\n    isStreaming: boolean;\n}\n\nexport const SpeechOutputAzure = ({ answer, speechConfig, index, isStreaming }: Props) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [localPlayingState, setLocalPlayingState] = useState(false);\n    const { t } = useTranslation();\n\n    const playAudio = async (url: string) => {\n        speechConfig.audio.src = url;\n        await speechConfig.audio\n            .play()\n            .then(() => {\n                speechConfig.audio.onended = () => {\n                    speechConfig.setIsPlaying(false);\n                    setLocalPlayingState(false);\n                };\n                speechConfig.setIsPlaying(true);\n                setLocalPlayingState(true);\n            })\n            .catch(() => {\n                alert(\"Failed to play speech output.\");\n                console.error(\"Failed to play speech output.\");\n                speechConfig.setIsPlaying(false);\n                setLocalPlayingState(false);\n            });\n    };\n\n    const startOrStopSpeech = async (answer: string) => {\n        if (speechConfig.isPlaying) {\n            speechConfig.audio.pause();\n            speechConfig.audio.currentTime = 0;\n            speechConfig.setIsPlaying(false);\n            setLocalPlayingState(false);\n            return;\n        }\n        if (speechConfig.speechUrls[index]) {\n            playAudio(speechConfig.speechUrls[index]);\n            return;\n        }\n        setIsLoading(true);\n        await getSpeechApi(answer).then(async speechUrl => {\n            if (!speechUrl) {\n                alert(\"Speech output is not available.\");\n                console.error(\"Speech output is not available.\");\n                return;\n            }\n            setIsLoading(false);\n            speechConfig.setSpeechUrls(speechConfig.speechUrls.map((url, i) => (i === index ? speechUrl : url)));\n            playAudio(speechUrl);\n        });\n    };\n\n    const color = localPlayingState ? \"red\" : \"black\";\n\n    // We always preload the Sync icon in hidden mode so that there's no visual glitch when icon changes\n    return isLoading ? (\n        <IconButton style={{ color: color }} iconProps={{ iconName: \"Sync\" }} title=\"Loading speech\" ariaLabel=\"Loading speech\" disabled={true} />\n    ) : (\n        <>\n            <IconButton iconProps={{ iconName: \"Sync\" }} ariaHidden={true} disabled={true} style={{ display: \"none\" }} />\n            <IconButton\n                style={{ color: color }}\n                iconProps={{ iconName: \"Volume3\" }}\n                title={t(\"tooltips.speakAnswer\")}\n                ariaLabel={t(\"tooltips.speakAnswer\")}\n                onClick={() => startOrStopSpeech(answer)}\n                disabled={isStreaming}\n            />\n        </>\n    );\n};\n","import { useMemo, useState } from \"react\";\nimport { Stack, IconButton } from \"@fluentui/react\";\nimport { useTranslation } from \"react-i18next\";\nimport DOMPurify from \"dompurify\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport rehypeRaw from \"rehype-raw\";\n\nimport styles from \"./Answer.module.css\";\nimport { ChatAppResponse, getCitationFilePath, SpeechConfig } from \"../../api\";\nimport { parseAnswerToHtml } from \"./AnswerParser\";\nimport { AnswerIcon } from \"./AnswerIcon\";\nimport { SpeechOutputBrowser } from \"./SpeechOutputBrowser\";\nimport { SpeechOutputAzure } from \"./SpeechOutputAzure\";\nimport { formatCitationForDisplay } from \"./citations\";\ninterface Props {\n    answer: ChatAppResponse;\n    index: number;\n    speechConfig: SpeechConfig;\n    isSelected?: boolean;\n    isStreaming: boolean;\n    onCitationClicked: (filePath: string) => void;\n    // onThoughtProcessClicked: () => void;\n    onSupportingContentClicked: () => void;\n    onFollowupQuestionClicked?: (question: string) => void;\n    showFollowupQuestions?: boolean;\n    showSpeechOutputBrowser?: boolean;\n    showSpeechOutputAzure?: boolean;\n}\n\nexport const Answer = ({\n    answer,\n    index,\n    speechConfig,\n    isSelected,\n    isStreaming,\n    onCitationClicked,\n    // onThoughtProcessClicked,\n    onSupportingContentClicked,\n    onFollowupQuestionClicked,\n    showFollowupQuestions,\n    showSpeechOutputAzure,\n    showSpeechOutputBrowser\n}: Props) => {\n    const followupQuestions = answer.context?.followup_questions;\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(answer, isStreaming, onCitationClicked), [answer]);\n    const { t } = useTranslation();\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\n    const [copied, setCopied] = useState(false);\n\n    const handleCopy = () => {\n        // Single replace to remove all HTML tags to remove the citations\n        const textToCopy = sanitizedAnswerHtml.replace(/<a [^>]*><sup>\\d+<\\/sup><\\/a>|<[^>]+>/g, \"\");\n\n        navigator.clipboard\n            .writeText(textToCopy)\n            .then(() => {\n                setCopied(true);\n                setTimeout(() => setCopied(false), 2000);\n            })\n            .catch(err => console.error(\"Failed to copy text: \", err));\n    };\n\n    return (\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\n            <Stack.Item grow>\n                <div className={styles.answerText}>\n                    <ReactMarkdown children={sanitizedAnswerHtml} rehypePlugins={[rehypeRaw]} remarkPlugins={[remarkGfm]} />\n                </div>\n            </Stack.Item>\n\n            {!!parsedAnswer.citations.length && (\n                <Stack.Item>\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }} horizontalAlign=\"space-between\">\n                        <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\n                            <span className={styles.citationLearnMore}>{t(\"citationWithColon\")}</span>\n                            {parsedAnswer.citations.map((x, i) => {\n                                const path = getCitationFilePath(x);\n                                const displayName = formatCitationForDisplay(x);\n                                return (\n                                    <a key={i} className={styles.citation} title={x} onClick={() => onCitationClicked(path)}>\n                                        {`${++i}. ${displayName}`}\n                                    </a>\n                                );\n                            })}\n                        </Stack>\n                        <Stack horizontal>\n                            <IconButton\n                                style={{ color: \"black\" }}\n                                iconProps={{ iconName: copied ? \"CheckMark\" : \"Copy\" }}\n                                title={copied ? t(\"tooltips.copied\") : t(\"tooltips.copy\")}\n                                ariaLabel={copied ? t(\"tooltips.copied\") : t(\"tooltips.copy\")}\n                                onClick={handleCopy}\n                            />\n                            <IconButton\n                                style={{ color: \"black\" }}\n                                iconProps={{ iconName: \"ClipboardList\" }}\n                                title={t(\"tooltips.showSupportingContent\")}\n                                ariaLabel={t(\"tooltips.showSupportingContent\")}\n                                onClick={() => onSupportingContentClicked()}\n                                disabled={!answer.context.data_points}\n                            />\n                            {showSpeechOutputAzure && (\n                                <SpeechOutputAzure answer={sanitizedAnswerHtml} index={index} speechConfig={speechConfig} isStreaming={isStreaming} />\n                            )}\n                            {showSpeechOutputBrowser && <SpeechOutputBrowser answer={sanitizedAnswerHtml} />}\n                        </Stack>\n                    </Stack>\n                </Stack.Item>\n            )}\n\n            {/* If there are no citations, still show the buttons */}\n            {!parsedAnswer.citations.length && (\n                <Stack.Item>\n                    <Stack horizontal horizontalAlign=\"end\">\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: copied ? \"CheckMark\" : \"Copy\" }}\n                            title={copied ? t(\"tooltips.copied\") : t(\"tooltips.copy\")}\n                            ariaLabel={copied ? t(\"tooltips.copied\") : t(\"tooltips.copy\")}\n                            onClick={handleCopy}\n                        />\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"ClipboardList\" }}\n                            title={t(\"tooltips.showSupportingContent\")}\n                            ariaLabel={t(\"tooltips.showSupportingContent\")}\n                            onClick={() => onSupportingContentClicked()}\n                            disabled={!answer.context.data_points}\n                        />\n                        {showSpeechOutputAzure && (\n                            <SpeechOutputAzure answer={sanitizedAnswerHtml} index={index} speechConfig={speechConfig} isStreaming={isStreaming} />\n                        )}\n                        {showSpeechOutputBrowser && <SpeechOutputBrowser answer={sanitizedAnswerHtml} />}\n                    </Stack>\n                </Stack.Item>\n            )}\n\n            {!!followupQuestions?.length && showFollowupQuestions && onFollowupQuestionClicked && (\n                <Stack.Item>\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\n                        <span className={styles.followupQuestionLearnMore}>{t(\"followupQuestions\")}</span>\n                        {followupQuestions.map((x, i) => {\n                            return (\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\n                                    {`${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n        </Stack>\n    );\n};\n","import { Stack } from \"@fluentui/react\";\nimport { animated, useSpring } from \"@react-spring/web\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./Answer.module.css\";\n\nexport const AnswerLoading = () => {\n    const { t, i18n } = useTranslation();\n    const animatedStyles = useSpring({\n        from: { opacity: 0 },\n        to: { opacity: 1 }\n    });\n\n    return (\n        <animated.div style={{ ...animatedStyles }}>\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n                <Stack.Item grow>\n                    <p className={styles.answerText}>\n                        {t(\"generatingAnswer\")}\n                        <span className={styles.loadingdots} />\n                    </p>\n                </Stack.Item>\n            </Stack>\n        </animated.div>\n    );\n};\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\n\nimport styles from \"./Answer.module.css\";\n\ninterface Props {\n    error: string;\n    onRetry: () => void;\n}\n\nexport const AnswerError = ({ error, onRetry }: Props) => {\n    return (\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\n\n            <Stack.Item grow>\n                <p className={styles.answerText}>{error}</p>\n            </Stack.Item>\n\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\n        </Stack>\n    );\n};\n","import { SetStateAction, useState } from \"react\";\nimport { Button, Tooltip } from \"@fluentui/react-components\";\nimport { Mic28Filled } from \"@fluentui/react-icons\";\nimport { useTranslation } from \"react-i18next\";\nimport styles from \"./QuestionInput.module.css\";\nimport { supportedLngs } from \"../../i18n/config\";\n\ninterface Props {\n    updateQuestion: (question: string) => void;\n}\n\nconst useCustomSpeechRecognition = () => {\n    const { i18n } = useTranslation();\n    const currentLng = i18n.language;\n    let lngCode = supportedLngs[currentLng]?.locale;\n    if (!lngCode) {\n        lngCode = \"en-US\";\n    }\n\n    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\n    let speechRecognition: {\n        continuous: boolean;\n        lang: string;\n        interimResults: boolean;\n        maxAlternatives: number;\n        start: () => void;\n        onresult: (event: { results: { transcript: SetStateAction<string> }[][] }) => void;\n        onend: () => void;\n        onerror: (event: { error: string }) => void;\n        stop: () => void;\n    } | null = null;\n\n    try {\n        speechRecognition = new SpeechRecognition();\n        if (speechRecognition != null) {\n            speechRecognition.lang = lngCode;\n            speechRecognition.interimResults = true;\n        }\n    } catch (err) {\n        console.error(\"SpeechRecognition not supported\");\n        speechRecognition = null;\n    }\n\n    return speechRecognition;\n};\n\nexport const SpeechInput = ({ updateQuestion }: Props) => {\n    let speechRecognition = useCustomSpeechRecognition();\n    const { t } = useTranslation();\n    const [isRecording, setIsRecording] = useState<boolean>(false);\n    const startRecording = () => {\n        if (speechRecognition == null) {\n            console.error(\"SpeechRecognition not supported\");\n            return;\n        }\n\n        speechRecognition.onresult = (event: { results: { transcript: SetStateAction<string> }[][] }) => {\n            let input = \"\";\n            for (const result of event.results) {\n                input += result[0].transcript;\n            }\n            updateQuestion(input);\n        };\n        speechRecognition.onend = () => {\n            // NOTE: In some browsers (e.g. Chrome), the recording will stop automatically after a few seconds of silence.\n            setIsRecording(false);\n        };\n        speechRecognition.onerror = (event: { error: string }) => {\n            if (speechRecognition) {\n                speechRecognition.stop();\n                if (event.error == \"no-speech\") {\n                    alert(\"No speech was detected. Please check your system audio settings and try again.\");\n                } else if (event.error == \"language-not-supported\") {\n                    alert(\n                        `Speech recognition error detected: ${event.error}. The speech recognition input functionality does not yet work on all browsers, like Edge in Mac OS X with ARM chips. Try another browser/OS.`\n                    );\n                } else {\n                    alert(`Speech recognition error detected: ${event.error}.`);\n                }\n            }\n        };\n\n        setIsRecording(true);\n        speechRecognition.start();\n    };\n\n    const stopRecording = () => {\n        if (speechRecognition == null) {\n            console.error(\"SpeechRecognition not supported\");\n            return;\n        }\n        speechRecognition.stop();\n        setIsRecording(false);\n    };\n\n    if (speechRecognition == null) {\n        return <></>;\n    }\n    return (\n        <>\n            {!isRecording && (\n                <div className={styles.questionInputButtonsContainer}>\n                    <Tooltip content={t(\"tooltips.askWithVoice\")} relationship=\"label\">\n                        <Button size=\"large\" icon={<Mic28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} onClick={startRecording} />\n                    </Tooltip>\n                </div>\n            )}\n            {isRecording && (\n                <div className={styles.questionInputButtonsContainer}>\n                    <Tooltip content={t(\"tooltips.stopRecording\")} relationship=\"label\">\n                        <Button size=\"large\" icon={<Mic28Filled primaryFill=\"rgba(250, 0, 0, 0.7)\" />} disabled={!isRecording} onClick={stopRecording} />\n                    </Tooltip>\n                </div>\n            )}\n        </>\n    );\n};\n","/**\n * This file defines a context for managing login state in a React application.\n * Context provides a way to pass data through the component tree without having to pass props down manually at every level.\n * For more information, refer to the official React documentation:\n * https://react.dev/learn/passing-data-deeply-with-context\n */\n\nimport { createContext } from \"react\";\n\nexport const LoginContext = createContext({\n    loggedIn: false,\n    setLoggedIn: (_: boolean) => {}\n});\n","import { useState, useEffect, useContext } from \"react\";\nimport { Stack, TextField } from \"@fluentui/react\";\nimport { Button } from \"@fluentui/react-components\";\nimport { Send28Filled } from \"@fluentui/react-icons\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./QuestionInput.module.css\";\nimport { SpeechInput } from \"./SpeechInput\";\nimport { LoginContext } from \"../../loginContext\";\nimport { requireLogin } from \"../../authConfig\";\n\ninterface Props {\n    onSend: (question: string) => void;\n    disabled: boolean;\n    initQuestion?: string;\n    placeholder?: string;\n    clearOnSend?: boolean;\n    showSpeechInput?: boolean;\n}\n\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend, initQuestion, showSpeechInput }: Props) => {\n    const [question, setQuestion] = useState<string>(\"\");\n    const { loggedIn } = useContext(LoginContext);\n    const { t } = useTranslation();\n    const [isComposing, setIsComposing] = useState(false);\n\n    useEffect(() => {\n        initQuestion && setQuestion(initQuestion);\n    }, [initQuestion]);\n\n    const sendQuestion = () => {\n        if (disabled || !question.trim()) {\n            return;\n        }\n\n        onSend(question);\n\n        if (clearOnSend) {\n            setQuestion(\"\");\n        }\n    };\n\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\n        if (isComposing) return;\n\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\n            ev.preventDefault();\n            sendQuestion();\n        }\n    };\n\n    const handleCompositionStart = () => {\n        setIsComposing(true);\n    };\n    const handleCompositionEnd = () => {\n        setIsComposing(false);\n    };\n\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        if (!newValue) {\n            setQuestion(\"\");\n        } else if (newValue.length <= 1000) {\n            setQuestion(newValue);\n        }\n    };\n\n    const disableRequiredAccessControl = requireLogin && !loggedIn;\n    const sendQuestionDisabled = disabled || !question.trim() || disableRequiredAccessControl;\n\n    if (disableRequiredAccessControl) {\n        placeholder = \"Please login to continue...\";\n    }\n\n    return (\n        <Stack horizontal className={styles.questionInputContainer}>\n            <TextField\n                className={styles.questionInputTextArea}\n                disabled={disableRequiredAccessControl}\n                placeholder={placeholder || \"Ask me anything...\"}\n                multiline\n                autoAdjustHeight\n                resizable={false}\n                borderless\n                value={question}\n                onChange={onQuestionChange}\n                onKeyDown={onEnterPress}\n                onCompositionStart={handleCompositionStart}\n                onCompositionEnd={handleCompositionEnd}\n            />\n            <div className={styles.questionInputButtonsContainer}>\n                <Button\n                    size=\"large\"\n                    icon={<Send28Filled primaryFill={sendQuestionDisabled ? \"#CCCCCC\" : \"rgba(0, 77, 155)\"} />}\n                    disabled={sendQuestionDisabled}\n                    onClick={sendQuestion}\n                />\n            </div>\n            {showSpeechInput && <SpeechInput updateQuestion={setQuestion} />}\n        </Stack>\n    );\n};\n","import styles from \"./Example.module.css\";\n\ninterface Props {\n    text: string;\n    value: string;\n    onClick: (value: string) => void;\n}\n\nexport const Example = ({ text, value, onClick }: Props) => {\n    return (\n        <div className={styles.example} onClick={() => onClick(value)}>\n            <p className={styles.exampleText}>{text}</p>\n            <span className={styles.arrowIcon}>↗</span>\n        </div>\n    );\n};\n","import { Example } from \"./Example\";\nimport { useTranslation } from \"react-i18next\";\nimport { useState, useEffect, useRef } from \"react\";\nimport styles from \"./Example.module.css\";\nimport chatStyles from \"../../pages/chat/Chat.module.css\";\n\ninterface Props {\n    onExampleClicked: (value: string) => void;\n    useGPT4V?: boolean;\n}\n\nexport const ExampleList = ({ onExampleClicked, useGPT4V }: Props) => {\n    const { t } = useTranslation();\n\n    // Full questions for sending to the API\n    const DEFAULT_EXAMPLES: string[] = [t(\"defaultExamples.1\"), t(\"defaultExamples.2\"), t(\"defaultExamples.3\")];\n    const GPT4V_EXAMPLES: string[] = [t(\"gpt4vExamples.1\"), t(\"gpt4vExamples.2\"), t(\"gpt4vExamples.3\")];\n\n    // Short phrases for display\n    const DEFAULT_PHRASES: string[] = [\"COPD Sauerstofftherapie\", \"Therapie bei Vorhofflimmern\", \"Diagnostik Lungenfibrose\"];\n    const GPT4V_PHRASES: string[] = [\"GPT4V Beispiel 1\", \"GPT4V Beispiel 2\", \"GPT4V Beispiel 3\"];\n\n    const examples = useGPT4V ? GPT4V_EXAMPLES : DEFAULT_EXAMPLES;\n    const phrases = useGPT4V ? GPT4V_PHRASES : DEFAULT_PHRASES;\n\n    return (\n        <div className={styles.examplesBoxContainer}>\n            {examples.map((question, i) => (\n                <Example\n                    key={i}\n                    text={phrases[i]}\n                    value={question}\n                    onClick={value => {\n                        onExampleClicked(value);\n                    }}\n                />\n            ))}\n        </div>\n    );\n};\n","import styles from \"./UserChatMessage.module.css\";\n\ninterface Props {\n    message: string;\n}\n\nexport const UserChatMessage = ({ message }: Props) => {\n    return (\n        <div className={styles.container}>\n            <div className={styles.message}>{message}</div>\n        </div>\n    );\n};\n","import DOMPurify from \"dompurify\";\n\ntype ParsedSupportingContentItem = {\n    title: string;\n    content: string;\n};\n\nexport function parseSupportingContentItem(item: string): ParsedSupportingContentItem {\n    // Assumes the item starts with the file name followed by : and the content.\n    // Example: \"sdp_corporate.pdf: this is the content that follows\".\n    const parts = item.split(\": \");\n    const title = parts[0];\n    const content = DOMPurify.sanitize(parts.slice(1).join(\": \"));\n\n    return {\n        title,\n        content\n    };\n}\n","import { parseSupportingContentItem } from \"./SupportingContentParser\";\nimport { formatCitationForDisplay } from \"../Answer/citations\";\n\nimport styles from \"./SupportingContent.module.css\";\n\ninterface Props {\n    supportingContent: string[] | { text: string[]; images?: string[] };\n}\n\nexport const SupportingContent = ({ supportingContent }: Props) => {\n    const textItems = Array.isArray(supportingContent) ? supportingContent : supportingContent.text;\n    const imageItems = !Array.isArray(supportingContent) ? supportingContent?.images : [];\n    return (\n        <ul className={styles.supportingContentNavList}>\n            {textItems.map((c, ind) => {\n                const parsed = parseSupportingContentItem(c);\n                return (\n                    <li className={styles.supportingContentItem} key={`supporting-content-text-${ind}`}>\n                        <h4 className={styles.supportingContentItemHeader}>{formatCitationForDisplay(parsed.title)}</h4>\n                        <p className={styles.supportingContentItemText} dangerouslySetInnerHTML={{ __html: parsed.content }} />\n                    </li>\n                );\n            })}\n            {imageItems?.map((img, ind) => {\n                return (\n                    <li className={styles.supportingContentItem} key={`supporting-content-image-${ind}`}>\n                        <img className={styles.supportingContentItemImage} src={img} />\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n","export enum AnalysisPanelTabs {\n    // ThoughtProcessTab = \"thoughtProcess\",\n    SupportingContentTab = \"supportingContent\",\n    CitationTab = \"citation\"\n}\n","import { Spinner, SpinnerSize, MessageBar, MessageBarType, Link, IconButton } from \"@fluentui/react\";\nimport { useTranslation } from \"react-i18next\";\nimport React, { useState, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\n\nimport styles from \"./MarkdownViewer.module.css\";\n\ninterface MarkdownViewerProps {\n    src: string;\n}\n\nexport const MarkdownViewer: React.FC<MarkdownViewerProps> = ({ src }) => {\n    const [content, setContent] = useState<string>(\"\");\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [error, setError] = useState<Error | null>(null);\n    const { t } = useTranslation();\n\n    /**\n     * Anchor links result in HTTP 404 errors as the URL they point to does not exist.\n     * This function removes them from the markdown.\n     */\n    const removeAnchorLinks = (markdown: string) => {\n        const ancorLinksRegex = /\\[.*?\\]\\(#.*?\\)/g;\n        return markdown.replace(ancorLinksRegex, \"\");\n    };\n\n    useEffect(() => {\n        const fetchMarkdown = async () => {\n            try {\n                const response = await fetch(src);\n\n                if (!response.ok) {\n                    throw new Error(\"Failed loading markdown file.\");\n                }\n\n                let markdownText = await response.text();\n                markdownText = removeAnchorLinks(markdownText);\n                setContent(markdownText);\n            } catch (error: any) {\n                setError(error);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchMarkdown();\n    }, [src]);\n\n    return (\n        <div>\n            {isLoading ? (\n                <div className={`${styles.loading} ${styles.markdownViewer}`}>\n                    <Spinner size={SpinnerSize.large} label=\"Loading file\" />\n                </div>\n            ) : error ? (\n                <div className={`${styles.error} ${styles.markdownViewer}`}>\n                    <MessageBar messageBarType={MessageBarType.error} isMultiline={false}>\n                        {error.message}\n                        <Link href={src} download>\n                            Download the file\n                        </Link>\n                    </MessageBar>\n                </div>\n            ) : (\n                <div>\n                    <IconButton\n                        className={styles.downloadButton}\n                        style={{ color: \"black\" }}\n                        iconProps={{ iconName: \"Save\" }}\n                        title={t(\"tooltips.save\")}\n                        ariaLabel={t(\"tooltips.save\")}\n                        href={src}\n                        download\n                    />\n                    <ReactMarkdown children={content} remarkPlugins={[remarkGfm]} className={`${styles.markdown} ${styles.markdownViewer}`} />\n                </div>\n            )}\n        </div>\n    );\n};\n","import { Stack, Pivot, PivotItem } from \"@fluentui/react\";\nimport { useTranslation } from \"react-i18next\";\nimport styles from \"./AnalysisPanel.module.css\";\n\nimport { SupportingContent } from \"../SupportingContent\";\nimport { ChatAppResponse } from \"../../api\";\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\n// import { ThoughtProcess } from \"./ThoughtProcess\";\nimport { MarkdownViewer } from \"../MarkdownViewer\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { getHeaders } from \"../../api\";\nimport { useLogin, getToken } from \"../../authConfig\";\nimport { useState, useEffect } from \"react\";\n\ninterface Props {\n    className: string;\n    activeTab: AnalysisPanelTabs;\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\n    activeCitation: string | undefined;\n    citationHeight: string;\n    answer: ChatAppResponse;\n}\n\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\n\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, citationHeight, className, onActiveTabChanged }: Props) => {\n    const isDisabledThoughtProcessTab: boolean = !answer.context.thoughts;\n    const isDisabledSupportingContentTab: boolean = !answer.context.data_points;\n    const isDisabledCitationTab: boolean = !activeCitation;\n    const [citation, setCitation] = useState(\"\");\n\n    const client = useLogin ? useMsal().instance : undefined;\n    const { t } = useTranslation();\n\n    const fetchCitation = async () => {\n        const token = client ? await getToken(client) : undefined;\n        if (activeCitation) {\n            // Get hash from the URL as it may contain #page=N\n            // which helps browser PDF renderer jump to correct page N\n            const originalHash = activeCitation.indexOf(\"#\") ? activeCitation.split(\"#\")[1] : \"\";\n            const response = await fetch(activeCitation, {\n                method: \"GET\",\n                headers: await getHeaders(token)\n            });\n            const citationContent = await response.blob();\n            let citationObjectUrl = URL.createObjectURL(citationContent);\n            // Add hash back to the new blob URL\n            if (originalHash) {\n                citationObjectUrl += \"#\" + originalHash;\n            }\n            setCitation(citationObjectUrl);\n        }\n    };\n    useEffect(() => {\n        fetchCitation();\n    }, []);\n\n    const renderFileViewer = () => {\n        if (!activeCitation) {\n            return null;\n        }\n\n        const fileExtension = activeCitation.split(\".\").pop()?.toLowerCase();\n        switch (fileExtension) {\n            case \"png\":\n                return <img src={citation} className={styles.citationImg} alt=\"Citation Image\" />;\n            case \"md\":\n                return <MarkdownViewer src={activeCitation} />;\n            default:\n                return (\n                    <div className={styles.citationContainer}>\n                        <iframe title=\"Citation\" src={citation} width=\"100%\" height={citationHeight} className={styles.citationIframe} />\n                    </div>\n                );\n        }\n    };\n\n    return (\n        <Pivot\n            className={className}\n            selectedKey={activeTab}\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\n        >\n            {/* <PivotItem\n                itemKey={AnalysisPanelTabs.ThoughtProcessTab}\n                headerText={t(\"headerTexts.thoughtProcess\")}\n                headerButtonProps={isDisabledThoughtProcessTab ? pivotItemDisabledStyle : undefined}\n            >\n                <ThoughtProcess thoughts={answer.context.thoughts || []} />\n            </PivotItem> */}\n            <PivotItem\n                itemKey={AnalysisPanelTabs.SupportingContentTab}\n                headerText={t(\"headerTexts.supportingContent\")}\n                headerButtonProps={isDisabledSupportingContentTab ? pivotItemDisabledStyle : undefined}\n            >\n                <SupportingContent supportingContent={answer.context.data_points} />\n            </PivotItem>\n            <PivotItem\n                itemKey={AnalysisPanelTabs.CitationTab}\n                headerText={t(\"headerTexts.citation\")}\n                headerButtonProps={isDisabledCitationTab ? pivotItemDisabledStyle : undefined}\n            >\n                {renderFileViewer()}\n            </PivotItem>\n        </Pivot>\n    );\n};\n","import { useState, useCallback } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport styles from \"./HistoryItem.module.css\";\nimport { DefaultButton } from \"@fluentui/react\";\nimport { Delete24Regular } from \"@fluentui/react-icons\";\n\nexport interface HistoryData {\n    id: string;\n    title: string;\n    timestamp: number;\n}\n\ninterface HistoryItemProps {\n    item: HistoryData;\n    onSelect: (id: string) => void;\n    onDelete: (id: string) => void;\n}\n\nexport function HistoryItem({ item, onSelect, onDelete }: HistoryItemProps) {\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    const handleDelete = useCallback(() => {\n        setIsModalOpen(false);\n        onDelete(item.id);\n    }, [item.id, onDelete]);\n\n    return (\n        <div className={styles.historyItem}>\n            <button onClick={() => onSelect(item.id)} className={styles.historyItemButton}>\n                <div className={styles.historyItemTitle}>{item.title}</div>\n            </button>\n            <button onClick={() => setIsModalOpen(true)} className={styles.deleteButton} aria-label=\"delete this chat history\">\n                <Delete24Regular className={styles.deleteIcon} />\n            </button>\n            <DeleteHistoryModal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} onConfirm={handleDelete} />\n        </div>\n    );\n}\n\nfunction DeleteHistoryModal({ isOpen, onClose, onConfirm }: { isOpen: boolean; onClose: () => void; onConfirm: () => void }) {\n    if (!isOpen) return null;\n    const { t } = useTranslation();\n    return (\n        <div className={styles.modalOverlay}>\n            <div className={styles.modalContent}>\n                <h2 className={styles.modalTitle}>{t(\"history.deleteModalTitle\")}</h2>\n                <p className={styles.modalDescription}>{t(\"history.deleteModalDescription\")}</p>\n                <div className={styles.modalActions}>\n                    <DefaultButton onClick={onClose} className={styles.modalCancelButton}>\n                        {t(\"history.cancelLabel\")}\n                    </DefaultButton>\n                    <DefaultButton onClick={onConfirm} className={styles.modalConfirmButton}>\n                        {t(\"history.deleteLabel\")}\n                    </DefaultButton>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import { ChatAppResponse } from \"../../api\";\n\nexport type HistoryMetaData = { id: string; title: string; timestamp: number };\nexport type Answers = [user: string, response: ChatAppResponse][];\n\nexport const enum HistoryProviderOptions {\n    None = \"none\",\n    IndexedDB = \"indexedDB\",\n    CosmosDB = \"cosmosDB\"\n}\n\nexport interface IHistoryProvider {\n    getProviderName(): HistoryProviderOptions;\n    resetContinuationToken(): void;\n    getNextItems(count: number, idToken?: string): Promise<HistoryMetaData[]>;\n    addItem(id: string, answers: Answers, idToken?: string): Promise<void>;\n    getItem(id: string, idToken?: string): Promise<Answers | null>;\n    deleteItem(id: string, idToken?: string): Promise<void>;\n}\n","import { IHistoryProvider, Answers, HistoryProviderOptions, HistoryMetaData } from \"./IProvider\";\n\nexport class NoneProvider implements IHistoryProvider {\n    getProviderName = () => HistoryProviderOptions.None;\n    resetContinuationToken(): void {\n        return;\n    }\n    async getNextItems(count: number): Promise<HistoryMetaData[]> {\n        return [];\n    }\n    async addItem(id: string, answers: Answers): Promise<void> {\n        return;\n    }\n    async getItem(id: string): Promise<null> {\n        return null;\n    }\n    async deleteItem(id: string): Promise<void> {\n        return;\n    }\n}\n","import { IDBPDatabase, openDB } from \"idb\";\nimport { IHistoryProvider, Answers, HistoryProviderOptions, HistoryMetaData } from \"./IProvider\";\n\nexport class IndexedDBProvider implements IHistoryProvider {\n    getProviderName = () => HistoryProviderOptions.IndexedDB;\n\n    private dbName: string;\n    private storeName: string;\n    private dbPromise: Promise<IDBPDatabase> | null = null;\n    private cursorKey: IDBValidKey | undefined;\n    private isCusorEnd: boolean = false;\n\n    constructor(dbName: string, storeName: string) {\n        this.dbName = dbName;\n        this.storeName = storeName;\n        this.cursorKey = undefined;\n        this.isCusorEnd = false;\n    }\n\n    private async init() {\n        const storeName = this.storeName;\n        if (!this.dbPromise) {\n            this.dbPromise = openDB(this.dbName, 1, {\n                upgrade(db) {\n                    if (!db.objectStoreNames.contains(storeName)) {\n                        const store = db.createObjectStore(storeName, { keyPath: \"id\" });\n                        store.createIndex(\"timestamp\", \"timestamp\");\n                    }\n                }\n            });\n        }\n        return this.dbPromise;\n    }\n\n    resetContinuationToken() {\n        this.cursorKey = undefined;\n        this.isCusorEnd = false;\n    }\n\n    async getNextItems(count: number): Promise<HistoryMetaData[]> {\n        const db = await this.init();\n        const tx = db.transaction(this.storeName, \"readonly\");\n        const store = tx.objectStore(this.storeName);\n        const index = store.index(\"timestamp\");\n\n        // return empty array if cursor is already at the end\n        if (this.isCusorEnd) {\n            return [];\n        }\n\n        // set cursor to the last key\n        let cursor = this.cursorKey ? await index.openCursor(IDBKeyRange.upperBound(this.cursorKey), \"prev\") : await index.openCursor(null, \"prev\");\n\n        // return empty array means no more history or no data. set isCursorEnd to true and return empty array\n        if (!cursor) {\n            this.isCusorEnd = true;\n            return [];\n        }\n\n        const loadedItems: { id: string; title: string; timestamp: number; answers: Answers }[] = [];\n        for (let i = 0; i < count && cursor; i++) {\n            loadedItems.push(cursor.value);\n            cursor = await cursor.continue();\n        }\n\n        // set isCursorEnd to true if cursor is null\n        if (!cursor) {\n            this.isCusorEnd = true;\n        }\n\n        // update cursorKey\n        this.cursorKey = cursor?.key;\n\n        return loadedItems;\n    }\n\n    async addItem(id: string, answers: Answers): Promise<void> {\n        const timestamp = new Date().getTime();\n        const db = await this.init(); // 自動的に初期化\n        const tx = db.transaction(this.storeName, \"readwrite\");\n        const current = await tx.objectStore(this.storeName).get(id);\n        if (current) {\n            await tx.objectStore(this.storeName).put({ ...current, id, timestamp, answers });\n        } else {\n            const title = answers[0][0].length > 50 ? answers[0][0].substring(0, 50) + \"...\" : answers[0][0];\n            await tx.objectStore(this.storeName).add({ id, title, timestamp, answers });\n        }\n        await tx.done;\n        return;\n    }\n\n    async getItem(id: string): Promise<Answers | null> {\n        const db = await this.init();\n        const tx = db.transaction(this.storeName, \"readonly\");\n        const item = await tx.objectStore(this.storeName).get(id);\n        return item ? item.answers : null;\n    }\n\n    async deleteItem(id: string): Promise<void> {\n        const db = await this.init();\n        await db.delete(this.storeName, id);\n        return;\n    }\n}\n","import { IHistoryProvider, Answers, HistoryProviderOptions, HistoryMetaData } from \"./IProvider\";\nimport { deleteChatHistoryApi, getChatHistoryApi, getChatHistoryListApi, postChatHistoryApi } from \"../../api\";\n\nexport class CosmosDBProvider implements IHistoryProvider {\n    getProviderName = () => HistoryProviderOptions.CosmosDB;\n\n    private continuationToken: string | undefined;\n    private isItemEnd: boolean = false;\n\n    resetContinuationToken() {\n        this.continuationToken = undefined;\n        this.isItemEnd = false;\n    }\n\n    async getNextItems(count: number, idToken?: string): Promise<HistoryMetaData[]> {\n        if (this.isItemEnd) {\n            return [];\n        }\n\n        try {\n            const response = await getChatHistoryListApi(count, this.continuationToken, idToken || \"\");\n            this.continuationToken = response.continuation_token;\n            if (!this.continuationToken) {\n                this.isItemEnd = true;\n            }\n            return response.items.map(item => ({\n                id: item.id,\n                title: item.title,\n                timestamp: item.timestamp\n            }));\n        } catch (e) {\n            console.error(e);\n            return [];\n        }\n    }\n\n    async addItem(id: string, answers: Answers, idToken?: string): Promise<void> {\n        await postChatHistoryApi({ id, answers }, idToken || \"\");\n        return;\n    }\n\n    async getItem(id: string, idToken?: string): Promise<Answers | null> {\n        const response = await getChatHistoryApi(id, idToken || \"\");\n        return response.answers || null;\n    }\n\n    async deleteItem(id: string, idToken?: string): Promise<void> {\n        await deleteChatHistoryApi(id, idToken || \"\");\n        return;\n    }\n}\n","import { useMemo } from \"react\";\nimport { IHistoryProvider, HistoryProviderOptions } from \"../HistoryProviders/IProvider\";\nimport { NoneProvider } from \"../HistoryProviders/None\";\nimport { IndexedDBProvider } from \"../HistoryProviders/IndexedDB\";\nimport { CosmosDBProvider } from \"../HistoryProviders/CosmosDB\";\n\nexport const useHistoryManager = (provider: HistoryProviderOptions): IHistoryProvider => {\n    const providerInstance = useMemo(() => {\n        switch (provider) {\n            case HistoryProviderOptions.IndexedDB:\n                return new IndexedDBProvider(\"chat-database\", \"chat-history\");\n            case HistoryProviderOptions.CosmosDB:\n                return new CosmosDBProvider();\n            case HistoryProviderOptions.None:\n            default:\n                return new NoneProvider();\n        }\n    }, [provider]);\n\n    return providerInstance;\n};\n","import { useMsal } from \"@azure/msal-react\";\nimport { getToken, useLogin } from \"../../authConfig\";\nimport { Panel, PanelType, Spinner } from \"@fluentui/react\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport { HistoryData, HistoryItem } from \"../HistoryItem\";\nimport { Answers, HistoryProviderOptions } from \"../HistoryProviders/IProvider\";\nimport { useHistoryManager, HistoryMetaData } from \"../HistoryProviders\";\nimport { useTranslation } from \"react-i18next\";\nimport styles from \"./HistoryPanel.module.css\";\n\nconst HISTORY_COUNT_PER_LOAD = 20;\n\nexport const HistoryPanel = ({\n    provider,\n    isOpen,\n    notify,\n    onClose,\n    onChatSelected\n}: {\n    provider: HistoryProviderOptions;\n    isOpen: boolean;\n    notify: boolean;\n    onClose: () => void;\n    onChatSelected: (answers: Answers) => void;\n}) => {\n    const historyManager = useHistoryManager(provider);\n    const [history, setHistory] = useState<HistoryMetaData[]>([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [hasMoreHistory, setHasMoreHistory] = useState(false);\n\n    const client = useLogin ? useMsal().instance : undefined;\n\n    useEffect(() => {\n        if (!isOpen) return;\n        if (notify) {\n            setHistory([]);\n            historyManager.resetContinuationToken();\n            setHasMoreHistory(true);\n        }\n    }, [isOpen, notify]);\n\n    const loadMoreHistory = async () => {\n        setIsLoading(() => true);\n        const token = client ? await getToken(client) : undefined;\n        const items = await historyManager.getNextItems(HISTORY_COUNT_PER_LOAD, token);\n        if (items.length === 0) {\n            setHasMoreHistory(false);\n        }\n        setHistory(prevHistory => [...prevHistory, ...items]);\n        setIsLoading(() => false);\n    };\n\n    const handleSelect = async (id: string) => {\n        const token = client ? await getToken(client) : undefined;\n        const item = await historyManager.getItem(id, token);\n        if (item) {\n            onChatSelected(item);\n        }\n    };\n\n    const handleDelete = async (id: string) => {\n        const token = client ? await getToken(client) : undefined;\n        await historyManager.deleteItem(id, token);\n        setHistory(prevHistory => prevHistory.filter(item => item.id !== id));\n    };\n\n    const groupedHistory = useMemo(() => groupHistory(history), [history]);\n\n    const { t } = useTranslation();\n\n    return (\n        <Panel\n            type={PanelType.customNear}\n            style={{ padding: \"0px\" }}\n            headerText={t(\"history.chatHistory\")}\n            customWidth=\"300px\"\n            isBlocking={false}\n            isOpen={isOpen}\n            onDismiss={() => onClose()}\n            onDismissed={() => {\n                setHistory([]);\n                setHasMoreHistory(true);\n                historyManager.resetContinuationToken();\n            }}\n        >\n            <div>\n                {Object.entries(groupedHistory).map(([group, items]) => (\n                    <div key={group} className={styles.group}>\n                        <p className={styles.groupLabel}>{t(group)}</p>\n                        {items.map(item => (\n                            <HistoryItem key={item.id} item={item} onSelect={handleSelect} onDelete={handleDelete} />\n                        ))}\n                    </div>\n                ))}\n                {isLoading && <Spinner style={{ marginTop: \"10px\" }} />}\n                {history.length === 0 && !isLoading && <p>{t(\"history.noHistory\")}</p>}\n                {hasMoreHistory && !isLoading && <InfiniteLoadingButton func={loadMoreHistory} />}\n            </div>\n        </Panel>\n    );\n};\n\nfunction groupHistory(history: HistoryData[]) {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n    const lastWeek = new Date(today);\n    lastWeek.setDate(lastWeek.getDate() - 7);\n    const lastMonth = new Date(today);\n    lastMonth.setDate(lastMonth.getDate() - 30);\n\n    return history.reduce(\n        (groups, item) => {\n            const itemDate = new Date(item.timestamp);\n            let group;\n\n            if (itemDate >= today) {\n                group = \"history.today\";\n            } else if (itemDate >= yesterday) {\n                group = \"history.yesterday\";\n            } else if (itemDate >= lastWeek) {\n                group = \"history.last7days\";\n            } else if (itemDate >= lastMonth) {\n                group = \"history.last30days\";\n            } else {\n                group = itemDate.toLocaleDateString(undefined, { year: \"numeric\", month: \"long\" });\n            }\n\n            if (!groups[group]) {\n                groups[group] = [];\n            }\n            groups[group].push(item);\n            return groups;\n        },\n        {} as Record<string, HistoryData[]>\n    );\n}\n\nconst InfiniteLoadingButton = ({ func }: { func: () => void }) => {\n    const buttonRef = useRef(null);\n\n    useEffect(() => {\n        const observer = new IntersectionObserver(\n            entries => {\n                entries.forEach(entry => {\n                    if (entry.isIntersecting) {\n                        if (buttonRef.current) {\n                            func();\n                        }\n                    }\n                });\n            },\n            {\n                root: null,\n                threshold: 0\n            }\n        );\n\n        if (buttonRef.current) {\n            observer.observe(buttonRef.current);\n        }\n\n        return () => {\n            if (buttonRef.current) {\n                observer.unobserve(buttonRef.current);\n            }\n        };\n    }, []);\n\n    return <button ref={buttonRef} onClick={func} />;\n};\n","import { History24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./HistoryButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nexport const HistoryButton = ({ className, disabled, onClick }: Props) => {\n    const { t } = useTranslation();\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<History24Regular />} disabled={disabled} onClick={onClick}>\n                {t(\"history.openChatHistory\")}\n            </Button>\n        </div>\n    );\n};\n","import React, { useState, ChangeEvent } from \"react\";\nimport { Callout, Label, Text } from \"@fluentui/react\";\nimport { Button } from \"@fluentui/react-components\";\nimport { Add24Regular, Delete24Regular } from \"@fluentui/react-icons\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { SimpleAPIResponse, uploadFileApi, deleteUploadedFileApi, listUploadedFilesApi } from \"../../api\";\nimport { useLogin, getToken } from \"../../authConfig\";\nimport styles from \"./UploadFile.module.css\";\n\ninterface Props {\n    className?: string;\n    disabled?: boolean;\n}\n\nexport const UploadFile: React.FC<Props> = ({ className, disabled }: Props) => {\n    // State variables to manage the component behavior\n    const [isCalloutVisible, setIsCalloutVisible] = useState<boolean>(false);\n    const [isUploading, setIsUploading] = useState<boolean>(false);\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [deletionStatus, setDeletionStatus] = useState<{ [filename: string]: \"pending\" | \"error\" | \"success\" }>({});\n    const [uploadedFile, setUploadedFile] = useState<SimpleAPIResponse>();\n    const [uploadedFileError, setUploadedFileError] = useState<string>();\n    const [uploadedFiles, setUploadedFiles] = useState<string[]>([]);\n    const { t } = useTranslation();\n\n    if (!useLogin) {\n        throw new Error(\"The UploadFile component requires useLogin to be true\");\n    }\n\n    const client = useMsal().instance;\n\n    // Handler for the \"Manage file uploads\" button\n    const handleButtonClick = async () => {\n        setIsCalloutVisible(!isCalloutVisible); // Toggle the Callout visibility\n\n        // Update uploaded files by calling the API\n        try {\n            const idToken = await getToken(client);\n            if (!idToken) {\n                throw new Error(\"No authentication token available\");\n            }\n            listUploadedFiles(idToken);\n        } catch (error) {\n            console.error(error);\n            setIsLoading(false);\n        }\n    };\n\n    const listUploadedFiles = async (idToken: string) => {\n        listUploadedFilesApi(idToken).then(files => {\n            setIsLoading(false);\n            setDeletionStatus({});\n            setUploadedFiles(files);\n        });\n    };\n\n    const handleRemoveFile = async (filename: string) => {\n        setDeletionStatus({ ...deletionStatus, [filename]: \"pending\" });\n\n        try {\n            const idToken = await getToken(client);\n            if (!idToken) {\n                throw new Error(\"No authentication token available\");\n            }\n\n            await deleteUploadedFileApi(filename, idToken);\n            setDeletionStatus({ ...deletionStatus, [filename]: \"success\" });\n            listUploadedFiles(idToken);\n        } catch (error) {\n            setDeletionStatus({ ...deletionStatus, [filename]: \"error\" });\n            console.error(error);\n        }\n    };\n\n    // Handler for the form submission (file upload)\n    const handleUploadFile = async (e: ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        if (!e.target.files || e.target.files.length === 0) {\n            return;\n        }\n        setIsUploading(true); // Start the loading state\n        const file: File = e.target.files[0];\n        const formData = new FormData();\n        formData.append(\"file\", file);\n\n        try {\n            const idToken = await getToken(client);\n            if (!idToken) {\n                throw new Error(\"No authentication token available\");\n            }\n            const response: SimpleAPIResponse = await uploadFileApi(formData, idToken);\n            setUploadedFile(response);\n            setIsUploading(false);\n            setUploadedFileError(undefined);\n            listUploadedFiles(idToken);\n        } catch (error) {\n            console.error(error);\n            setIsUploading(false);\n            setUploadedFileError(t(\"upload.uploadedFileError\"));\n        }\n    };\n\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <div>\n                <Button id=\"calloutButton\" icon={<Add24Regular />} disabled={disabled} onClick={handleButtonClick}>\n                    {t(\"upload.manageFileUploads\")}\n                </Button>\n\n                {isCalloutVisible && (\n                    <Callout\n                        role=\"dialog\"\n                        gapSpace={0}\n                        className={styles.callout}\n                        target=\"#calloutButton\"\n                        onDismiss={() => setIsCalloutVisible(false)}\n                        setInitialFocus\n                    >\n                        <form encType=\"multipart/form-data\">\n                            <div>\n                                <Label>{t(\"upload.fileLabel\")}</Label>\n                                <input\n                                    accept=\".txt, .md, .json, .png, .jpg, .jpeg, .bmp, .heic, .tiff, .pdf, .docx, .xlsx, .pptx, .html\"\n                                    className={styles.chooseFiles}\n                                    type=\"file\"\n                                    onChange={handleUploadFile}\n                                />\n                            </div>\n                        </form>\n\n                        {/* Show a loading message while files are being uploaded */}\n                        {isUploading && <Text>{t(\"upload.uploadingFiles\")}</Text>}\n                        {!isUploading && uploadedFileError && <Text>{uploadedFileError}</Text>}\n                        {!isUploading && uploadedFile && <Text>{uploadedFile.message}</Text>}\n\n                        {/* Display the list of already uploaded */}\n                        <h3>{t(\"upload.uploadedFilesLabel\")}</h3>\n\n                        {isLoading && <Text>{t(\"upload.loading\")}</Text>}\n                        {!isLoading && uploadedFiles.length === 0 && <Text>{t(\"upload.noFilesUploaded\")}</Text>}\n                        {uploadedFiles.map((filename, index) => {\n                            return (\n                                <div key={index} className={styles.list}>\n                                    <div className={styles.item}>{filename}</div>\n                                    {/* Button to remove a file from the list */}\n                                    <Button\n                                        icon={<Delete24Regular />}\n                                        onClick={() => handleRemoveFile(filename)}\n                                        disabled={deletionStatus[filename] === \"pending\" || deletionStatus[filename] === \"success\"}\n                                    >\n                                        {!deletionStatus[filename] && t(\"upload.deleteFile\")}\n                                        {deletionStatus[filename] == \"pending\" && t(\"upload.deletingFile\")}\n                                        {deletionStatus[filename] == \"error\" && t(\"upload.errorDeleting\")}\n                                        {deletionStatus[filename] == \"success\" && t(\"upload.fileDeleted\")}\n                                    </Button>\n                                </div>\n                            );\n                        })}\n                    </Callout>\n                )}\n            </div>\n        </div>\n    );\n};\n","import { Label } from \"@fluentui/react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport {\n    DataGridBody,\n    DataGridRow,\n    DataGrid,\n    DataGridHeader,\n    DataGridHeaderCell,\n    DataGridCell,\n    createTableColumn,\n    TableColumnDefinition\n} from \"@fluentui/react-table\";\nimport { getTokenClaims } from \"../../authConfig\";\nimport { useState, useEffect } from \"react\";\n\ntype Claim = {\n    name: string;\n    value: string;\n};\n\nexport const TokenClaimsDisplay = () => {\n    const { instance } = useMsal();\n    const activeAccount = instance.getActiveAccount();\n    const [claims, setClaims] = useState<Record<string, unknown> | undefined>(undefined);\n\n    useEffect(() => {\n        const fetchClaims = async () => {\n            setClaims(await getTokenClaims(instance));\n        };\n\n        fetchClaims();\n    }, []);\n\n    const ToString = (a: string | any) => {\n        if (typeof a === \"string\") {\n            return a;\n        } else {\n            return JSON.stringify(a);\n        }\n    };\n\n    let createClaims = (o: Record<string, unknown> | undefined) => {\n        return Object.keys(o ?? {}).map((key: string) => {\n            let originalKey = key;\n            try {\n                // Some claim names may be a URL to a full schema, just use the last part of the URL in this case\n                const url = new URL(key);\n                const parts = url.pathname.split(\"/\");\n                key = parts[parts.length - 1];\n            } catch (error) {\n                // Do not parse key if it's not a URL\n            }\n            return { name: key, value: ToString((o ?? {})[originalKey]) };\n        });\n    };\n    const items: Claim[] = createClaims(claims);\n\n    const columns: TableColumnDefinition<Claim>[] = [\n        createTableColumn<Claim>({\n            columnId: \"name\",\n            compare: (a: Claim, b: Claim) => {\n                return a.name.localeCompare(b.name);\n            },\n            renderHeaderCell: () => {\n                return \"Name\";\n            },\n            renderCell: item => {\n                return item.name;\n            }\n        }),\n        createTableColumn<Claim>({\n            columnId: \"value\",\n            compare: (a: Claim, b: Claim) => {\n                return a.value.localeCompare(b.value);\n            },\n            renderHeaderCell: () => {\n                return \"Value\";\n            },\n            renderCell: item => {\n                return item.value;\n            }\n        })\n    ];\n\n    return (\n        <div>\n            <Label>ID Token Claims</Label>\n            <DataGrid items={items} columns={columns} sortable getRowId={item => item.name}>\n                <DataGridHeader>\n                    <DataGridRow>{({ renderHeaderCell }) => <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>}</DataGridRow>\n                </DataGridHeader>\n                <DataGridBody<Claim>>\n                    {({ item, rowId }) => <DataGridRow<Claim> key={rowId}>{({ renderCell }) => <DataGridCell>{renderCell(item)}</DataGridCell>}</DataGridRow>}\n                </DataGridBody>\n            </DataGrid>\n        </div>\n    );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { LocalLanguage24Regular } from \"@fluentui/react-icons\";\nimport { IDropdownOption, Dropdown } from \"@fluentui/react\";\nimport { useId } from \"@fluentui/react-hooks\";\n\nimport { supportedLngs } from \"./config\";\nimport styles from \"./LanguagePicker.module.css\";\n\ninterface Props {\n    onLanguageChange: (language: string) => void;\n}\n\nexport const LanguagePicker = ({ onLanguageChange }: Props) => {\n    const { i18n } = useTranslation();\n\n    const handleLanguageChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<string> | undefined) => {\n        onLanguageChange(option?.data || i18n.language);\n    };\n    const languagePickerId = useId(\"languagePicker\");\n    const { t } = useTranslation();\n\n    return (\n        <div className={styles.languagePicker}>\n            <LocalLanguage24Regular className={styles.languagePickerIcon} />\n            <Dropdown\n                id={languagePickerId}\n                selectedKey={i18n.language}\n                options={Object.entries(supportedLngs).map(([code, details]) => ({\n                    key: code,\n                    text: details.name,\n                    selected: code === i18n.language,\n                    data: code\n                }))}\n                onChange={handleLanguageChange}\n                ariaLabel={t(\"labels.languagePicker\")}\n            />\n        </div>\n    );\n};\n","import { ITextFieldProps, DefaultButton, IconButton, IButtonStyles, Callout, IStackTokens, Stack, IStackStyles, initializeIcons } from \"@fluentui/react\";\nimport { useBoolean, useId } from \"@fluentui/react-hooks\";\nimport { useTranslation } from \"react-i18next\";\n\nconst stackTokens: IStackTokens = {\n    childrenGap: 4,\n    maxWidth: 300\n};\n\nconst labelCalloutStackStyles: Partial<IStackStyles> = { root: { padding: 20 } };\nconst iconButtonStyles: Partial<IButtonStyles> = { root: { marginBottom: -3 } };\nconst iconProps = { iconName: \"Info\" };\n\ninterface IHelpCalloutProps {\n    label: string | undefined;\n    labelId: string;\n    fieldId: string | undefined;\n    helpText: string;\n}\n\nexport const HelpCallout = (props: IHelpCalloutProps): JSX.Element => {\n    const [isCalloutVisible, { toggle: toggleIsCalloutVisible }] = useBoolean(false);\n    const descriptionId: string = useId(\"description\");\n    const iconButtonId: string = useId(\"iconButton\");\n    const { t } = useTranslation();\n\n    return (\n        <>\n            <Stack horizontal verticalAlign=\"center\" tokens={stackTokens}>\n                <label id={props.labelId} htmlFor={props.fieldId}>\n                    {props.label}\n                </label>\n                <IconButton\n                    id={iconButtonId}\n                    iconProps={iconProps}\n                    title={t(\"tooltips.info\")}\n                    ariaLabel={t(\"tooltips.info\")}\n                    onClick={toggleIsCalloutVisible}\n                    styles={iconButtonStyles}\n                />\n            </Stack>\n            {isCalloutVisible && (\n                <Callout target={\"#\" + iconButtonId} setInitialFocus onDismiss={toggleIsCalloutVisible} ariaDescribedBy={descriptionId} role=\"alertdialog\">\n                    <Stack tokens={stackTokens} horizontalAlign=\"start\" styles={labelCalloutStackStyles}>\n                        <span id={descriptionId}>{props.helpText}</span>\n                        <DefaultButton onClick={toggleIsCalloutVisible}>{t(\"labels.closeButton\")}</DefaultButton>\n                    </Stack>\n                </Callout>\n            )}\n        </>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { Stack, Checkbox, ICheckboxProps, IDropdownOption, IDropdownProps, Dropdown } from \"@fluentui/react\";\nimport { useId } from \"@fluentui/react-hooks\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./GPT4VSettings.module.css\";\nimport { GPT4VInput } from \"../../api\";\nimport { HelpCallout } from \"../../components/HelpCallout\";\n\ninterface Props {\n    gpt4vInputs: GPT4VInput;\n    isUseGPT4V: boolean;\n    updateGPT4VInputs: (input: GPT4VInput) => void;\n    updateUseGPT4V: (useGPT4V: boolean) => void;\n}\n\nexport const GPT4VSettings = ({ updateGPT4VInputs, updateUseGPT4V, isUseGPT4V, gpt4vInputs }: Props) => {\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(isUseGPT4V);\n    const [vectorFieldOption, setVectorFieldOption] = useState<GPT4VInput>(gpt4vInputs || GPT4VInput.TextAndImages);\n\n    const onuseGPT4V = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        updateUseGPT4V(!!checked);\n        setUseGPT4V(!!checked);\n    };\n\n    const onSetGPT4VInput = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<GPT4VInput> | undefined) => {\n        if (option) {\n            const data = option.key as GPT4VInput;\n            updateGPT4VInputs(data || GPT4VInput.TextAndImages);\n            data && setVectorFieldOption(data);\n        }\n    };\n\n    useEffect(() => {\n        useGPT4V && updateGPT4VInputs(GPT4VInput.TextAndImages);\n    }, [useGPT4V]);\n\n    const useGPT4VId = useId(\"useGPT4V\");\n    const useGPT4VFieldId = useId(\"useGPT4VField\");\n    const gpt4VInputId = useId(\"gpt4VInput\");\n    const gpt4VInputFieldId = useId(\"gpt4VInputField\");\n    const { t } = useTranslation();\n\n    return (\n        <Stack className={styles.container} tokens={{ childrenGap: 10 }}>\n            <Checkbox\n                id={useGPT4VFieldId}\n                checked={useGPT4V}\n                label={t(\"labels.useGPT4V\")}\n                onChange={onuseGPT4V}\n                aria-labelledby={useGPT4VId}\n                onRenderLabel={(props: ICheckboxProps | undefined) => (\n                    <HelpCallout labelId={useGPT4VId} fieldId={useGPT4VFieldId} helpText={t(\"helpTexts.useGPT4Vision\")} label={props?.label} />\n                )}\n            />\n            {useGPT4V && (\n                <Dropdown\n                    id={gpt4VInputFieldId}\n                    selectedKey={vectorFieldOption}\n                    label={t(\"labels.gpt4VInput.label\")}\n                    options={[\n                        {\n                            key: GPT4VInput.TextAndImages,\n                            text: t(\"labels.gpt4VInput.options.textAndImages\")\n                        },\n                        { text: t(\"labels.gpt4VInput.options.images\"), key: GPT4VInput.Images },\n                        { text: t(\"labels.gpt4VInput.options.texts\"), key: GPT4VInput.Texts }\n                    ]}\n                    required\n                    onChange={onSetGPT4VInput}\n                    aria-labelledby={gpt4VInputId}\n                    onRenderLabel={(props: IDropdownProps | undefined) => (\n                        <HelpCallout labelId={gpt4VInputId} fieldId={gpt4VInputFieldId} helpText={t(\"helpTexts.gpt4VisionInputs\")} label={props?.label} />\n                    )}\n                />\n            )}\n        </Stack>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { Stack, IDropdownOption, Dropdown, IDropdownProps } from \"@fluentui/react\";\nimport { useId } from \"@fluentui/react-hooks\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./VectorSettings.module.css\";\nimport { HelpCallout } from \"../../components/HelpCallout\";\nimport { RetrievalMode, VectorFieldOptions } from \"../../api\";\n\ninterface Props {\n    showImageOptions?: boolean;\n    defaultRetrievalMode: RetrievalMode;\n    updateRetrievalMode: (retrievalMode: RetrievalMode) => void;\n    updateVectorFields: (options: VectorFieldOptions[]) => void;\n}\n\nexport const VectorSettings = ({ updateRetrievalMode, updateVectorFields, showImageOptions, defaultRetrievalMode }: Props) => {\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [vectorFieldOption, setVectorFieldOption] = useState<VectorFieldOptions>(VectorFieldOptions.Both);\n\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined) => {\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\n        updateRetrievalMode(option?.data || RetrievalMode.Hybrid);\n    };\n\n    const onVectorFieldsChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined) => {\n        setVectorFieldOption(option?.key as VectorFieldOptions);\n        updateVectorFields([option?.key as VectorFieldOptions]);\n    };\n\n    useEffect(() => {\n        showImageOptions\n            ? updateVectorFields([VectorFieldOptions.Embedding, VectorFieldOptions.ImageEmbedding])\n            : updateVectorFields([VectorFieldOptions.Embedding]);\n    }, [showImageOptions]);\n\n    const retrievalModeId = useId(\"retrievalMode\");\n    const retrievalModeFieldId = useId(\"retrievalModeField\");\n    const vectorFieldsId = useId(\"vectorFields\");\n    const vectorFieldsFieldId = useId(\"vectorFieldsField\");\n    const { t } = useTranslation();\n\n    return (\n        <Stack className={styles.container} tokens={{ childrenGap: 10 }}>\n            <Dropdown\n                id={retrievalModeFieldId}\n                label={t(\"labels.retrievalMode.label\")}\n                selectedKey={defaultRetrievalMode.toString()}\n                options={[\n                    {\n                        key: \"hybrid\",\n                        text: t(\"labels.retrievalMode.options.hybrid\"),\n                        selected: retrievalMode == RetrievalMode.Hybrid,\n                        data: RetrievalMode.Hybrid\n                    },\n                    {\n                        key: \"vectors\",\n                        text: t(\"labels.retrievalMode.options.vectors\"),\n                        selected: retrievalMode == RetrievalMode.Vectors,\n                        data: RetrievalMode.Vectors\n                    },\n                    { key: \"text\", text: t(\"labels.retrievalMode.options.texts\"), selected: retrievalMode == RetrievalMode.Text, data: RetrievalMode.Text }\n                ]}\n                required\n                onChange={onRetrievalModeChange}\n                aria-labelledby={retrievalModeId}\n                onRenderLabel={(props: IDropdownProps | undefined) => (\n                    <HelpCallout labelId={retrievalModeId} fieldId={retrievalModeFieldId} helpText={t(\"helpTexts.retrievalMode\")} label={props?.label} />\n                )}\n            />\n\n            {showImageOptions && [RetrievalMode.Vectors, RetrievalMode.Hybrid].includes(retrievalMode) && (\n                <Dropdown\n                    id={vectorFieldsFieldId}\n                    label={t(\"labels.vector.label\")}\n                    options={[\n                        {\n                            key: VectorFieldOptions.Embedding,\n                            text: t(\"labels.vector.options.embedding\"),\n                            selected: vectorFieldOption === VectorFieldOptions.Embedding\n                        },\n                        {\n                            key: VectorFieldOptions.ImageEmbedding,\n                            text: t(\"labels.vector.options.imageEmbedding\"),\n                            selected: vectorFieldOption === VectorFieldOptions.ImageEmbedding\n                        },\n                        { key: VectorFieldOptions.Both, text: t(\"labels.vector.options.both\"), selected: vectorFieldOption === VectorFieldOptions.Both }\n                    ]}\n                    onChange={onVectorFieldsChange}\n                    aria-labelledby={vectorFieldsId}\n                    onRenderLabel={(props: IDropdownProps | undefined) => (\n                        <HelpCallout labelId={vectorFieldsId} fieldId={vectorFieldsFieldId} helpText={t(\"helpTexts.vectorFields\")} label={props?.label} />\n                    )}\n                />\n            )}\n        </Stack>\n    );\n};\n","import { useId } from \"@fluentui/react-hooks\";\nimport { useTranslation } from \"react-i18next\";\nimport { TextField, ITextFieldProps, Checkbox, ICheckboxProps, Dropdown, IDropdownProps, IDropdownOption } from \"@fluentui/react\";\nimport { HelpCallout } from \"../HelpCallout\";\nimport { GPT4VSettings } from \"../GPT4VSettings\";\nimport { VectorSettings } from \"../VectorSettings\";\nimport { RetrievalMode, VectorFieldOptions, GPT4VInput } from \"../../api\";\nimport styles from \"./Settings.module.css\";\n\n// Add type for onRenderLabel\ntype RenderLabelType = ITextFieldProps | IDropdownProps | ICheckboxProps;\n\nexport interface SettingsProps {\n    promptTemplate: string;\n    temperature: number;\n    retrieveCount: number;\n    seed: number | null;\n    minimumSearchScore: number;\n    minimumRerankerScore: number;\n    useSemanticRanker: boolean;\n    useSemanticCaptions: boolean;\n    excludeCategory: string;\n    includeCategory: string;\n    retrievalMode: RetrievalMode;\n    useGPT4V: boolean;\n    gpt4vInput: GPT4VInput;\n    vectorFieldList: VectorFieldOptions[];\n    showSemanticRankerOption: boolean;\n    showGPT4VOptions: boolean;\n    showVectorOption: boolean;\n    useOidSecurityFilter: boolean;\n    useGroupsSecurityFilter: boolean;\n    useLogin: boolean;\n    loggedIn: boolean;\n    requireAccessControl: boolean;\n    className?: string;\n    onChange: (field: string, value: any) => void;\n    shouldStream?: boolean; // Only used in Chat\n    useSuggestFollowupQuestions?: boolean; // Only used in Chat\n    promptTemplatePrefix?: string;\n    promptTemplateSuffix?: string;\n    showSuggestFollowupQuestions?: boolean;\n}\n\nexport const Settings = ({\n    promptTemplate,\n    temperature,\n    retrieveCount,\n    seed,\n    minimumSearchScore,\n    minimumRerankerScore,\n    useSemanticRanker,\n    useSemanticCaptions,\n    excludeCategory,\n    includeCategory,\n    retrievalMode,\n    useGPT4V,\n    gpt4vInput,\n    vectorFieldList,\n    showSemanticRankerOption,\n    showGPT4VOptions,\n    showVectorOption,\n    useOidSecurityFilter,\n    useGroupsSecurityFilter,\n    useLogin,\n    loggedIn,\n    requireAccessControl,\n    className,\n    onChange,\n    shouldStream,\n    useSuggestFollowupQuestions,\n    promptTemplatePrefix,\n    promptTemplateSuffix,\n    showSuggestFollowupQuestions\n}: SettingsProps) => {\n    const { t } = useTranslation();\n\n    // Form field IDs\n    const promptTemplateId = useId(\"promptTemplate\");\n    const promptTemplateFieldId = useId(\"promptTemplateField\");\n    const temperatureId = useId(\"temperature\");\n    const temperatureFieldId = useId(\"temperatureField\");\n    const seedId = useId(\"seed\");\n    const seedFieldId = useId(\"seedField\");\n    const searchScoreId = useId(\"searchScore\");\n    const searchScoreFieldId = useId(\"searchScoreField\");\n    const rerankerScoreId = useId(\"rerankerScore\");\n    const rerankerScoreFieldId = useId(\"rerankerScoreField\");\n    const retrieveCountId = useId(\"retrieveCount\");\n    const retrieveCountFieldId = useId(\"retrieveCountField\");\n    const includeCategoryId = useId(\"includeCategory\");\n    const includeCategoryFieldId = useId(\"includeCategoryField\");\n    const excludeCategoryId = useId(\"excludeCategory\");\n    const excludeCategoryFieldId = useId(\"excludeCategoryField\");\n    const semanticRankerId = useId(\"semanticRanker\");\n    const semanticRankerFieldId = useId(\"semanticRankerField\");\n    const semanticCaptionsId = useId(\"semanticCaptions\");\n    const semanticCaptionsFieldId = useId(\"semanticCaptionsField\");\n    const useOidSecurityFilterId = useId(\"useOidSecurityFilter\");\n    const useOidSecurityFilterFieldId = useId(\"useOidSecurityFilterField\");\n    const useGroupsSecurityFilterId = useId(\"useGroupsSecurityFilter\");\n    const useGroupsSecurityFilterFieldId = useId(\"useGroupsSecurityFilterField\");\n    const shouldStreamId = useId(\"shouldStream\");\n    const shouldStreamFieldId = useId(\"shouldStreamField\");\n    const suggestFollowupQuestionsId = useId(\"suggestFollowupQuestions\");\n    const suggestFollowupQuestionsFieldId = useId(\"suggestFollowupQuestionsField\");\n\n    const renderLabel = (props: RenderLabelType | undefined, labelId: string, fieldId: string, helpText: string) => (\n        <HelpCallout labelId={labelId} fieldId={fieldId} helpText={helpText} label={props?.label} />\n    );\n\n    return (\n        <div className={className}>\n            <TextField\n                id={promptTemplateFieldId}\n                className={styles.settingsSeparator}\n                defaultValue={promptTemplate}\n                label={t(\"labels.promptTemplate\")}\n                multiline\n                autoAdjustHeight\n                onChange={(_ev, val) => onChange(\"promptTemplate\", val || \"\")}\n                aria-labelledby={promptTemplateId}\n                onRenderLabel={props => renderLabel(props, promptTemplateId, promptTemplateFieldId, t(\"helpTexts.promptTemplate\"))}\n            />\n\n            <TextField\n                id={temperatureFieldId}\n                className={styles.settingsSeparator}\n                label={t(\"labels.temperature\")}\n                type=\"number\"\n                min={0}\n                max={1}\n                step={0.1}\n                defaultValue={temperature.toString()}\n                onChange={(_ev, val) => onChange(\"temperature\", parseFloat(val || \"0\"))}\n                aria-labelledby={temperatureId}\n                onRenderLabel={props => renderLabel(props, temperatureId, temperatureFieldId, t(\"helpTexts.temperature\"))}\n            />\n\n            <TextField\n                id={seedFieldId}\n                className={styles.settingsSeparator}\n                label={t(\"labels.seed\")}\n                type=\"text\"\n                defaultValue={seed?.toString() || \"\"}\n                onChange={(_ev, val) => onChange(\"seed\", val ? parseInt(val) : null)}\n                aria-labelledby={seedId}\n                onRenderLabel={props => renderLabel(props, seedId, seedFieldId, t(\"helpTexts.seed\"))}\n            />\n\n            <TextField\n                id={searchScoreFieldId}\n                className={styles.settingsSeparator}\n                label={t(\"labels.minimumSearchScore\")}\n                type=\"number\"\n                min={0}\n                step={0.01}\n                defaultValue={minimumSearchScore.toString()}\n                onChange={(_ev, val) => onChange(\"minimumSearchScore\", parseFloat(val || \"0\"))}\n                aria-labelledby={searchScoreId}\n                onRenderLabel={props => renderLabel(props, searchScoreId, searchScoreFieldId, t(\"helpTexts.searchScore\"))}\n            />\n\n            {showSemanticRankerOption && (\n                <TextField\n                    id={rerankerScoreFieldId}\n                    className={styles.settingsSeparator}\n                    label={t(\"labels.minimumRerankerScore\")}\n                    type=\"number\"\n                    min={1}\n                    max={4}\n                    step={0.1}\n                    defaultValue={minimumRerankerScore.toString()}\n                    onChange={(_ev, val) => onChange(\"minimumRerankerScore\", parseFloat(val || \"0\"))}\n                    aria-labelledby={rerankerScoreId}\n                    onRenderLabel={props => renderLabel(props, rerankerScoreId, rerankerScoreFieldId, t(\"helpTexts.rerankerScore\"))}\n                />\n            )}\n\n            <TextField\n                id={retrieveCountFieldId}\n                className={styles.settingsSeparator}\n                label={t(\"labels.retrieveCount\")}\n                type=\"number\"\n                min={1}\n                max={50}\n                defaultValue={retrieveCount.toString()}\n                onChange={(_ev, val) => onChange(\"retrieveCount\", parseInt(val || \"3\"))}\n                aria-labelledby={retrieveCountId}\n                onRenderLabel={props => renderLabel(props, retrieveCountId, retrieveCountFieldId, t(\"helpTexts.retrieveNumber\"))}\n            />\n\n            <Dropdown\n                id={includeCategoryFieldId}\n                className={styles.settingsSeparator}\n                label={t(\"labels.includeCategory\")}\n                selectedKey={includeCategory}\n                onChange={(_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IDropdownOption) => onChange(\"includeCategory\", option?.key || \"\")}\n                aria-labelledby={includeCategoryId}\n                options={[\n                    { key: \"\", text: t(\"labels.includeCategoryOptions.all\") }\n                    // { key: \"example\", text: \"Example Category\" } // Add more categories as needed\n                ]}\n                onRenderLabel={props => renderLabel(props, includeCategoryId, includeCategoryFieldId, t(\"helpTexts.includeCategory\"))}\n            />\n\n            <TextField\n                id={excludeCategoryFieldId}\n                className={styles.settingsSeparator}\n                label={t(\"labels.excludeCategory\")}\n                defaultValue={excludeCategory}\n                onChange={(_ev, val) => onChange(\"excludeCategory\", val || \"\")}\n                aria-labelledby={excludeCategoryId}\n                onRenderLabel={props => renderLabel(props, excludeCategoryId, excludeCategoryFieldId, t(\"helpTexts.excludeCategory\"))}\n            />\n\n            {showSemanticRankerOption && (\n                <>\n                    <Checkbox\n                        id={semanticRankerFieldId}\n                        className={styles.settingsSeparator}\n                        checked={useSemanticRanker}\n                        label={t(\"labels.useSemanticRanker\")}\n                        onChange={(_ev, checked) => onChange(\"useSemanticRanker\", !!checked)}\n                        aria-labelledby={semanticRankerId}\n                        onRenderLabel={props => renderLabel(props, semanticRankerId, semanticRankerFieldId, t(\"helpTexts.useSemanticReranker\"))}\n                    />\n\n                    <Checkbox\n                        id={semanticCaptionsFieldId}\n                        className={styles.settingsSeparator}\n                        checked={useSemanticCaptions}\n                        label={t(\"labels.useSemanticCaptions\")}\n                        onChange={(_ev, checked) => onChange(\"useSemanticCaptions\", !!checked)}\n                        disabled={!useSemanticRanker}\n                        aria-labelledby={semanticCaptionsId}\n                        onRenderLabel={props => renderLabel(props, semanticCaptionsId, semanticCaptionsFieldId, t(\"helpTexts.useSemanticCaptions\"))}\n                    />\n                </>\n            )}\n\n            {useLogin && (\n                <>\n                    <Checkbox\n                        id={useOidSecurityFilterFieldId}\n                        className={styles.settingsSeparator}\n                        checked={useOidSecurityFilter || requireAccessControl}\n                        label={t(\"labels.useOidSecurityFilter\")}\n                        disabled={!loggedIn || requireAccessControl}\n                        onChange={(_ev, checked) => onChange(\"useOidSecurityFilter\", !!checked)}\n                        aria-labelledby={useOidSecurityFilterId}\n                        onRenderLabel={props => renderLabel(props, useOidSecurityFilterId, useOidSecurityFilterFieldId, t(\"helpTexts.useOidSecurityFilter\"))}\n                    />\n                    <Checkbox\n                        id={useGroupsSecurityFilterFieldId}\n                        className={styles.settingsSeparator}\n                        checked={useGroupsSecurityFilter || requireAccessControl}\n                        label={t(\"labels.useGroupsSecurityFilter\")}\n                        disabled={!loggedIn || requireAccessControl}\n                        onChange={(_ev, checked) => onChange(\"useGroupsSecurityFilter\", !!checked)}\n                        aria-labelledby={useGroupsSecurityFilterId}\n                        onRenderLabel={props =>\n                            renderLabel(props, useGroupsSecurityFilterId, useGroupsSecurityFilterFieldId, t(\"helpTexts.useGroupsSecurityFilter\"))\n                        }\n                    />\n                </>\n            )}\n\n            {showGPT4VOptions && (\n                <GPT4VSettings\n                    gpt4vInputs={gpt4vInput}\n                    isUseGPT4V={useGPT4V}\n                    updateUseGPT4V={val => onChange(\"useGPT4V\", val)}\n                    updateGPT4VInputs={val => onChange(\"gpt4vInput\", val)}\n                />\n            )}\n\n            {showVectorOption && (\n                <VectorSettings\n                    defaultRetrievalMode={retrievalMode}\n                    showImageOptions={useGPT4V && showGPT4VOptions}\n                    updateVectorFields={val => onChange(\"vectorFieldList\", val)}\n                    updateRetrievalMode={val => onChange(\"retrievalMode\", val)}\n                />\n            )}\n\n            {/* Streaming checkbox for Chat */}\n            {shouldStream !== undefined && (\n                <Checkbox\n                    id={shouldStreamFieldId}\n                    className={styles.settingsSeparator}\n                    checked={shouldStream}\n                    label={t(\"labels.shouldStream\")}\n                    onChange={(_ev, checked) => onChange(\"shouldStream\", !!checked)}\n                    aria-labelledby={shouldStreamId}\n                    onRenderLabel={props => renderLabel(props, shouldStreamId, shouldStreamFieldId, t(\"helpTexts.streamChat\"))}\n                />\n            )}\n\n            {/* Followup questions checkbox for Chat */}\n            {showSuggestFollowupQuestions && (\n                <Checkbox\n                    id={suggestFollowupQuestionsFieldId}\n                    className={styles.settingsSeparator}\n                    checked={useSuggestFollowupQuestions}\n                    label={t(\"labels.useSuggestFollowupQuestions\")}\n                    onChange={(_ev, checked) => onChange(\"useSuggestFollowupQuestions\", !!checked)}\n                    aria-labelledby={suggestFollowupQuestionsId}\n                    onRenderLabel={props =>\n                        renderLabel(props, suggestFollowupQuestionsId, suggestFollowupQuestionsFieldId, t(\"helpTexts.suggestFollowupQuestions\"))\n                    }\n                />\n            )}\n        </div>\n    );\n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport styles from \"./TypewriterEffect.module.css\";\n\ninterface TypewriterEffectProps {\n    phrases: string[];\n    typingSpeed?: number;\n    deletingSpeed?: number;\n    delayAfterType?: number;\n    delayAfterDelete?: number;\n}\n\nconst TypewriterEffect: React.FC<TypewriterEffectProps> = ({\n    phrases,\n    typingSpeed = 100,\n    deletingSpeed = 50,\n    delayAfterType = 9000,\n    delayAfterDelete = 500\n}) => {\n    const [currentText, setCurrentText] = useState(\"\");\n    const [isDeleting, setIsDeleting] = useState(false);\n    const [phraseIndex, setPhraseIndex] = useState(0);\n    const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n    const [showCursor, setShowCursor] = useState(true);\n\n    useEffect(() => {\n        const currentPhrase = phrases[phraseIndex];\n\n        // Clear any existing timeout\n        if (timeoutRef.current) {\n            clearTimeout(timeoutRef.current);\n        }\n\n        // If we're deleting\n        if (isDeleting) {\n            setShowCursor(true);\n            if (currentText === \"\") {\n                // Done deleting, move to next phrase\n                setIsDeleting(false);\n                setPhraseIndex(prevIndex => (prevIndex + 1) % phrases.length);\n                timeoutRef.current = setTimeout(() => {\n                    // This timeout creates a pause after deletion before typing the next word\n                }, delayAfterDelete);\n            } else {\n                // Continue deleting\n                timeoutRef.current = setTimeout(() => {\n                    setCurrentText(currentText.slice(0, -1));\n                }, deletingSpeed);\n            }\n        }\n        // If we're typing\n        else {\n            if (currentText === currentPhrase) {\n                // Done typing, prepare to delete after delay\n                setShowCursor(false); // Hide cursor during the delay\n                timeoutRef.current = setTimeout(() => {\n                    setIsDeleting(true);\n                    setShowCursor(true); // Show cursor again when deletion starts\n                }, delayAfterType);\n            } else {\n                // Continue typing\n                setShowCursor(true);\n                timeoutRef.current = setTimeout(() => {\n                    setCurrentText(currentPhrase.slice(0, currentText.length + 1));\n                }, typingSpeed);\n            }\n        }\n\n        return () => {\n            if (timeoutRef.current) {\n                clearTimeout(timeoutRef.current);\n            }\n        };\n    }, [currentText, isDeleting, phraseIndex, phrases, typingSpeed, deletingSpeed, delayAfterType, delayAfterDelete]);\n\n    return (\n        <span className={styles.typewriterContainer}>\n            {currentText}\n            {showCursor && <span className={styles.cursor}></span>}\n        </span>\n    );\n};\n\nexport default TypewriterEffect;\n","export default \"data:image/svg+xml,%3c?xml%20version='1.0'%20encoding='UTF-8'?%3e%3csvg%20id='Wortmarke'%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20182.83%2095.65'%3e%3cdefs%3e%3cstyle%3e.cls-1{fill:%237e898f;}.cls-2{fill-rule:evenodd;}.cls-2,.cls-3{fill:%231d1d1b;}.cls-4{fill:none;}%3c/style%3e%3c/defs%3e%3cg%3e%3cg%3e%3cpolygon%20class='cls-3'%20points='143.94%2040.35%20148.65%2040.35%20148.65%2038.35%20137.12%2038.35%20137.12%2040.35%20141.78%2040.35%20141.78%2057.68%20143.94%2057.68%20143.94%2040.35'/%3e%3crect%20class='cls-3'%20x='126.83'%20y='38.36'%20width='2.15'%20height='19.33'/%3e%3cpath%20class='cls-2'%20d='m94.23,52.2h-8.25l-2.33,5.49h-2.36l8.51-19.33.41-.9.39.9,8.29,19.33h-2.38l-2.28-5.49Zm-.85-2l-3.23-7.74-3.31,7.74h6.54'/%3e%3cpath%20class='cls-2'%20d='m108.12,40.35v6.95h2.7c2.49,0,4.2-1.14,4.2-3.6s-2-3.35-4.22-3.35h-2.67Zm5.09,8.55l4.7,8.78h-2.5l-4.39-8.49h-2.9v8.49h-2.15v-19.33h5.1c3.18,0,6.1,1.45,6.1,5.35,0,3.08-1.95,4.62-3.96,5.21'/%3e%3cpolygon%20class='cls-3'%20points='156.44%2057.68%20166.9%2057.68%20166.9%2055.68%20158.6%2055.68%20158.6%2048.1%20165.72%2048.1%20165.72%2046.1%20158.6%2046.1%20158.6%2040.35%20166.59%2040.35%20166.59%2038.35%20156.44%2038.35%20156.44%2057.68'/%3e%3cpolygon%20class='cls-3'%20points='162.58%2031.33%20159.53%2035.53%20160.81%2036.25%20164.73%2032.3%20162.58%2031.33'/%3e%3cpolygon%20class='cls-3'%20points='62.26%2046.2%2068.82%2046.2%2068.82%2048.2%2062.26%2048.2%2062.26%2057.68%2060.1%2057.68%2060.1%2038.35%2062.26%2038.35%2062.26%2046.2'/%3e%3crect%20class='cls-3'%20x='71.76'%20y='38.36'%20width='2.15'%20height='19.33'/%3e%3cpath%20class='cls-3'%20d='m51.62,39.84c-1.7-1.27-3.58-1.88-5.71-1.88-6.28,0-10.21,4.69-10.21,10.13s3.96,9.98,10.21,9.98c2.03,0,4.06-.69,5.71-1.88v-2.59c-1.53,1.53-3.61,2.52-5.78,2.52-4.7,0-7.8-3.88-7.8-8.11s3.04-8.11,7.75-8.11c2.22,0,4.3.94,5.83,2.52v-2.59'/%3e%3c/g%3e%3cpath%20class='cls-1'%20d='m16.1,48.02c0-15.4,12.4-27.88,28.11-27.88,6.88,0,13.18,2.49,18.04,6.62v4.29c-4.49-4.76-10.85-7.73-17.91-7.73-13.77,0-24.53,11.02-24.53,24.61s10.77,24.61,24.53,24.61c7.06,0,13.42-2.97,17.91-7.73v4.46c-4.86,4.13-11.16,6.62-18.04,6.62-15.7,0-28.11-12.48-28.11-27.88'/%3e%3c/g%3e%3crect%20class='cls-4'%20width='182.83'%20height='95.65'/%3e%3c/svg%3e\"","import { DefaultButton } from \"@fluentui/react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./LoginButton.module.css\";\nimport { getRedirectUri, loginRequest, appServicesLogout, getUsername, checkLoggedIn } from \"../../authConfig\";\nimport { useState, useEffect, useContext } from \"react\";\nimport { LoginContext } from \"../../loginContext\";\n\nexport const LoginButton = () => {\n    const { instance } = useMsal();\n    const { loggedIn, setLoggedIn } = useContext(LoginContext);\n    const activeAccount = instance.getActiveAccount();\n    const [username, setUsername] = useState(\"\");\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        const fetchUsername = async () => {\n            setUsername((await getUsername(instance)) ?? \"\");\n        };\n\n        fetchUsername();\n    }, []);\n\n    const handleLoginPopup = () => {\n        /**\n         * When using popup and silent APIs, we recommend setting the redirectUri to a blank page or a page\n         * that does not implement MSAL. Keep in mind that all redirect routes must be registered with the application\n         * For more information, please follow this link: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/login-user.md#redirecturi-considerations\n         */\n        instance\n            .loginPopup({\n                ...loginRequest,\n                redirectUri: getRedirectUri()\n            })\n            .catch(error => console.log(error))\n            .then(async () => {\n                setLoggedIn(await checkLoggedIn(instance));\n                setUsername((await getUsername(instance)) ?? \"\");\n            });\n    };\n    const handleLogoutPopup = () => {\n        if (activeAccount) {\n            instance\n                .logoutPopup({\n                    mainWindowRedirectUri: \"/\", // redirects the top level app after logout\n                    account: instance.getActiveAccount()\n                })\n                .catch(error => console.log(error))\n                .then(async () => {\n                    setLoggedIn(await checkLoggedIn(instance));\n                    setUsername((await getUsername(instance)) ?? \"\");\n                });\n        } else {\n            appServicesLogout();\n        }\n    };\n    return (\n        <DefaultButton\n            text={loggedIn ? `${t(\"logout\")}\\n${username}` : `${t(\"login\")}`}\n            className={styles.loginButton}\n            onClick={loggedIn ? handleLogoutPopup : handleLoginPopup}\n        ></DefaultButton>\n    );\n};\n","import { Delete24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./ClearChatButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\n    const { t, i18n } = useTranslation();\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<Delete24Regular />} disabled={disabled} onClick={onClick}>\n                {t(\"clearChat\")}\n            </Button>\n        </div>\n    );\n};\n","import { Settings24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./SettingsButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n}\n\nexport const SettingsButton = ({ className, onClick }: Props) => {\n    const { t } = useTranslation();\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<Settings24Regular />} onClick={onClick}>\n                {t(\"developerSettings\")}\n            </Button>\n        </div>\n    );\n};\n","import React, { useState, useEffect, useRef, RefObject } from \"react\";\nimport { Outlet, Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport styles from \"./Layout.module.css\";\n\nimport { useLogin } from \"../../authConfig\";\nimport chariteLogo from \"../../assets/221215_Charite_Wortbildmarke_oU_RGB.svg\";\n\nimport { LoginButton } from \"../../components/LoginButton\";\nimport { IconButton } from \"@fluentui/react\";\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\nimport { SettingsButton } from \"../../components/SettingsButton\";\n\n// Create a context to share state between Layout and Chat components\nexport const LayoutContext = React.createContext<{\n    clearChat?: () => void;\n    setClearChatFunction?: (fn: () => void) => void;\n    openSettings?: () => void;\n    setOpenSettingsFunction?: (fn: () => void) => void;\n}>({});\n\nconst Layout = () => {\n    const { t } = useTranslation();\n    const [menuOpen, setMenuOpen] = useState(false);\n    const menuRef: RefObject<HTMLDivElement> = useRef(null);\n    const [clearChatFunction, setClearChatFunction] = useState<(() => void) | undefined>(undefined);\n    const [openSettingsFunction, setOpenSettingsFunction] = useState<(() => void) | undefined>(undefined);\n\n    const toggleMenu = () => {\n        setMenuOpen(!menuOpen);\n    };\n\n    const handleClickOutside = (event: MouseEvent) => {\n        if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n            setMenuOpen(false);\n        }\n    };\n\n    useEffect(() => {\n        if (menuOpen) {\n            document.addEventListener(\"mousedown\", handleClickOutside);\n        } else {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        }\n        return () => {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [menuOpen]);\n\n    const handleClearChat = () => {\n        if (clearChatFunction) {\n            clearChatFunction();\n        }\n    };\n\n    const handleOpenSettings = () => {\n        if (openSettingsFunction) {\n            openSettingsFunction();\n        }\n    };\n\n    return (\n        <LayoutContext.Provider\n            value={{\n                clearChat: clearChatFunction,\n                setClearChatFunction,\n                openSettings: openSettingsFunction,\n                setOpenSettingsFunction\n            }}\n        >\n            <div className={styles.layout}>\n                <header className={styles.header} role={\"banner\"}>\n                    <div className={styles.headerContainer} ref={menuRef}>\n                        <div className={styles.logoContainer}>\n                            <a\n                                href=\"#/\"\n                                onClick={e => {\n                                    e.preventDefault();\n                                    if (clearChatFunction) {\n                                        // currently deleting chat -> change when chat history is implemented\n                                        clearChatFunction();\n                                    }\n                                }}\n                            >\n                                <img src={chariteLogo} alt=\"Charité Logo\" className={styles.chariteLogo} />\n                            </a>\n                        </div>\n\n                        <div className={styles.headerButtonsContainer}>\n                            <ClearChatButton className={styles.headerButton} onClick={handleClearChat} disabled={!clearChatFunction} />\n                            <SettingsButton className={styles.headerButton} onClick={handleOpenSettings} />\n                            {useLogin && <LoginButton />}\n                            <IconButton\n                                iconProps={{ iconName: \"GlobalNavButton\" }}\n                                className={styles.menuToggle}\n                                onClick={toggleMenu}\n                                ariaLabel={t(\"labels.toggleMenu\")}\n                            />\n                        </div>\n                    </div>\n                </header>\n\n                <main className={styles.mainContent}>\n                    <Outlet />\n                </main>\n            </div>\n        </LayoutContext.Provider>\n    );\n};\n\nexport default Layout;\n","import { useRef, useState, useEffect, useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Panel, DefaultButton } from \"@fluentui/react\";\nimport { SparkleFilled } from \"@fluentui/react-icons\";\nimport img from \"../../assets/img.png\";\nimport chariteLogo from \"../../assets/CharitéLogo.png\";\nimport awmfLogo from \"../../assets/1.png\";\nimport baekLogo from \"../../assets/2.png\";\nimport kbvLogo from \"../../assets/3.png\";\n\nimport readNDJSONStream from \"ndjson-readablestream\";\n\nimport styles from \"./Chat.module.css\";\n\nimport {\n    chatApi,\n    configApi,\n    RetrievalMode,\n    ChatAppResponse,\n    ChatAppResponseOrError,\n    ChatAppRequest,\n    ResponseMessage,\n    VectorFieldOptions,\n    GPT4VInput,\n    SpeechConfig\n} from \"../../api\";\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { ExampleList } from \"../../components/Example\";\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\nimport { HistoryPanel } from \"../../components/HistoryPanel\";\nimport { HistoryProviderOptions, useHistoryManager } from \"../../components/HistoryProviders\";\nimport { HistoryButton } from \"../../components/HistoryButton\";\nimport { SettingsButton } from \"../../components/SettingsButton\";\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\nimport { UploadFile } from \"../../components/UploadFile\";\nimport { useLogin, getToken, requireAccessControl } from \"../../authConfig\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\nimport { LoginContext } from \"../../loginContext\";\nimport { LanguagePicker } from \"../../i18n/LanguagePicker\";\nimport { Settings } from \"../../components/Settings/Settings\";\nimport TypewriterEffect from \"../../components/TypewriterEffect\";\nimport { LayoutContext } from \"../layout/Layout\";\n\nconst Chat = () => {\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState<boolean>(false);\n    const [isHistoryPanelOpen, setIsHistoryPanelOpen] = useState(false);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [temperature, setTemperature] = useState<number>(0.1);\n    const [seed, setSeed] = useState<number | null>(null);\n    const [minimumRerankerScore, setMinimumRerankerScore] = useState<number>(0);\n    const [minimumSearchScore, setMinimumSearchScore] = useState<number>(0);\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\n    const [shouldStream, setShouldStream] = useState<boolean>(true);\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\n    const [includeCategory, setIncludeCategory] = useState<string>(\"\");\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\n    const [useSuggestFollowupQuestions, setUseSuggestFollowupQuestions] = useState<boolean>(false);\n    const [vectorFieldList, setVectorFieldList] = useState<VectorFieldOptions[]>([VectorFieldOptions.Embedding]);\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\n    const [gpt4vInput, setGPT4VInput] = useState<GPT4VInput>(GPT4VInput.TextAndImages);\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(false);\n\n    const lastQuestionRef = useRef<string>(\"\");\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [isStreaming, setIsStreaming] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n\n    const [activeCitation, setActiveCitation] = useState<string>();\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\n\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\n    const [answers, setAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\n    const [streamedAnswers, setStreamedAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\n    const [speechUrls, setSpeechUrls] = useState<(string | null)[]>([]);\n\n    const [showGPT4VOptions, setShowGPT4VOptions] = useState<boolean>(false);\n    const [showSemanticRankerOption, setShowSemanticRankerOption] = useState<boolean>(false);\n    const [showVectorOption, setShowVectorOption] = useState<boolean>(false);\n    const [showUserUpload, setShowUserUpload] = useState<boolean>(false);\n    const [showLanguagePicker, setshowLanguagePicker] = useState<boolean>(false);\n    const [showSpeechInput, setShowSpeechInput] = useState<boolean>(false);\n    const [showSpeechOutputBrowser, setShowSpeechOutputBrowser] = useState<boolean>(false);\n    const [showSpeechOutputAzure, setShowSpeechOutputAzure] = useState<boolean>(false);\n    const [showChatHistoryBrowser, setShowChatHistoryBrowser] = useState<boolean>(false);\n    const [showChatHistoryCosmos, setShowChatHistoryCosmos] = useState<boolean>(false);\n    const audio = useRef(new Audio()).current;\n    const [isPlaying, setIsPlaying] = useState(false);\n\n    const speechConfig: SpeechConfig = {\n        speechUrls,\n        setSpeechUrls,\n        audio,\n        isPlaying,\n        setIsPlaying\n    };\n\n    const getConfig = async () => {\n        configApi().then(config => {\n            setShowGPT4VOptions(config.showGPT4VOptions);\n            setUseSemanticRanker(config.showSemanticRankerOption);\n            setShowSemanticRankerOption(config.showSemanticRankerOption);\n            setShowVectorOption(config.showVectorOption);\n            if (!config.showVectorOption) {\n                setRetrievalMode(RetrievalMode.Text);\n            }\n            setShowUserUpload(config.showUserUpload);\n            setshowLanguagePicker(config.showLanguagePicker);\n            setShowSpeechInput(config.showSpeechInput);\n            setShowSpeechOutputBrowser(config.showSpeechOutputBrowser);\n            setShowSpeechOutputAzure(config.showSpeechOutputAzure);\n            setShowChatHistoryBrowser(config.showChatHistoryBrowser);\n            setShowChatHistoryCosmos(config.showChatHistoryCosmos);\n        });\n    };\n\n    const handleAsyncRequest = async (question: string, answers: [string, ChatAppResponse][], responseBody: ReadableStream<any>) => {\n        let answer: string = \"\";\n        let askResponse: ChatAppResponse = {} as ChatAppResponse;\n\n        const updateState = (newContent: string) => {\n            return new Promise(resolve => {\n                setTimeout(() => {\n                    answer += newContent;\n                    const latestResponse: ChatAppResponse = {\n                        ...askResponse,\n                        message: { content: answer, role: askResponse.message.role }\n                    };\n                    setStreamedAnswers([...answers, [question, latestResponse]]);\n                    resolve(null);\n                }, 33);\n            });\n        };\n        try {\n            setIsStreaming(true);\n            for await (const event of readNDJSONStream(responseBody)) {\n                if (event[\"context\"] && event[\"context\"][\"data_points\"]) {\n                    event[\"message\"] = event[\"delta\"];\n                    askResponse = event as ChatAppResponse;\n                } else if (event[\"delta\"] && event[\"delta\"][\"content\"]) {\n                    setIsLoading(false);\n                    await updateState(event[\"delta\"][\"content\"]);\n                } else if (event[\"context\"]) {\n                    // Update context with new keys from latest event\n                    askResponse.context = { ...askResponse.context, ...event[\"context\"] };\n                } else if (event[\"error\"]) {\n                    throw Error(event[\"error\"]);\n                }\n            }\n        } finally {\n            setIsStreaming(false);\n        }\n        const fullResponse: ChatAppResponse = {\n            ...askResponse,\n            message: { content: answer, role: askResponse.message.role }\n        };\n        return fullResponse;\n    };\n\n    const client = useLogin ? useMsal().instance : undefined;\n    const { loggedIn } = useContext(LoginContext);\n\n    const historyProvider: HistoryProviderOptions = (() => {\n        if (useLogin && showChatHistoryCosmos) return HistoryProviderOptions.CosmosDB;\n        if (showChatHistoryBrowser) return HistoryProviderOptions.IndexedDB;\n        return HistoryProviderOptions.None;\n    })();\n    const historyManager = useHistoryManager(historyProvider);\n\n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        error && setError(undefined);\n        setIsLoading(true);\n\n        const token = client ? await getToken(client) : undefined;\n\n        try {\n            const messages: ResponseMessage[] = answers.flatMap(a => [\n                { content: a[0], role: \"user\" },\n                { content: a[1].message.content, role: \"assistant\" }\n            ]);\n\n            const request: ChatAppRequest = {\n                messages: [...messages, { content: question, role: \"user\" }],\n                context: {\n                    overrides: {\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\n                        include_category: includeCategory.length === 0 ? undefined : includeCategory,\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\n                        top: retrieveCount,\n                        temperature: temperature,\n                        minimum_reranker_score: minimumRerankerScore,\n                        minimum_search_score: minimumSearchScore,\n                        retrieval_mode: retrievalMode,\n                        semantic_ranker: useSemanticRanker,\n                        semantic_captions: useSemanticCaptions,\n                        suggest_followup_questions: useSuggestFollowupQuestions,\n                        use_oid_security_filter: useOidSecurityFilter,\n                        use_groups_security_filter: useGroupsSecurityFilter,\n                        vector_fields: vectorFieldList,\n                        use_gpt4v: useGPT4V,\n                        gpt4v_input: gpt4vInput,\n                        language: i18n.language,\n                        ...(seed !== null ? { seed: seed } : {})\n                    }\n                },\n                // AI Chat Protocol: Client must pass on any session state received from the server\n                session_state: answers.length ? answers[answers.length - 1][1].session_state : null\n            };\n\n            const response = await chatApi(request, shouldStream, token);\n            if (!response.body) {\n                throw Error(\"No response body\");\n            }\n            if (response.status > 299 || !response.ok) {\n                throw Error(`Request failed with status ${response.status}`);\n            }\n            if (shouldStream) {\n                const parsedResponse: ChatAppResponse = await handleAsyncRequest(question, answers, response.body);\n                setAnswers([...answers, [question, parsedResponse]]);\n\n                // If analysis panel is open, update the selected answer to the newest one\n                if (activeAnalysisPanelTab) {\n                    setSelectedAnswer(answers.length);\n                }\n\n                if (typeof parsedResponse.session_state === \"string\" && parsedResponse.session_state !== \"\") {\n                    const token = client ? await getToken(client) : undefined;\n                    historyManager.addItem(parsedResponse.session_state, [...answers, [question, parsedResponse]], token);\n                }\n            } else {\n                const parsedResponse: ChatAppResponseOrError = await response.json();\n                if (parsedResponse.error) {\n                    throw Error(parsedResponse.error);\n                }\n                setAnswers([...answers, [question, parsedResponse as ChatAppResponse]]);\n\n                // If analysis panel is open, update the selected answer to the newest one\n                if (activeAnalysisPanelTab) {\n                    setSelectedAnswer(answers.length);\n                }\n                if (typeof parsedResponse.session_state === \"string\" && parsedResponse.session_state !== \"\") {\n                    const token = client ? await getToken(client) : undefined;\n                    historyManager.addItem(parsedResponse.session_state, [...answers, [question, parsedResponse as ChatAppResponse]], token);\n                }\n            }\n            setSpeechUrls([...speechUrls, null]);\n        } catch (e) {\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const clearChat = () => {\n        lastQuestionRef.current = \"\";\n        error && setError(undefined);\n        setAnswers([]);\n        setSpeechUrls([]);\n        setStreamedAnswers([]);\n        setIsLoading(false);\n        setIsStreaming(false);\n    };\n\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"auto\" }), [streamedAnswers]);\n    useEffect(() => {\n        getConfig();\n    }, []);\n\n    const handleSettingsChange = (field: string, value: any) => {\n        switch (field) {\n            case \"promptTemplate\":\n                setPromptTemplate(value);\n                break;\n            case \"temperature\":\n                setTemperature(value);\n                break;\n            case \"seed\":\n                setSeed(value);\n                break;\n            case \"minimumRerankerScore\":\n                setMinimumRerankerScore(value);\n                break;\n            case \"minimumSearchScore\":\n                setMinimumSearchScore(value);\n                break;\n            case \"retrieveCount\":\n                setRetrieveCount(value);\n                break;\n            case \"useSemanticRanker\":\n                setUseSemanticRanker(value);\n                break;\n            case \"useSemanticCaptions\":\n                setUseSemanticCaptions(value);\n                break;\n            case \"excludeCategory\":\n                setExcludeCategory(value);\n                break;\n            case \"includeCategory\":\n                setIncludeCategory(value);\n                break;\n            case \"useOidSecurityFilter\":\n                setUseOidSecurityFilter(value);\n                break;\n            case \"useGroupsSecurityFilter\":\n                setUseGroupsSecurityFilter(value);\n                break;\n            case \"shouldStream\":\n                setShouldStream(value);\n                break;\n            case \"useSuggestFollowupQuestions\":\n                setUseSuggestFollowupQuestions(value);\n                break;\n            case \"useGPT4V\":\n                setUseGPT4V(value);\n                break;\n            case \"gpt4vInput\":\n                setGPT4VInput(value);\n                break;\n            case \"vectorFieldList\":\n                setVectorFieldList(value);\n                break;\n            case \"retrievalMode\":\n                setRetrievalMode(value);\n                break;\n        }\n    };\n\n    const onExampleClicked = (example: string) => {\n        makeApiRequest(example);\n    };\n\n    const onShowCitation = (citation: string, index: number) => {\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveCitation(citation);\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveAnalysisPanelTab(tab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    const { t, i18n } = useTranslation();\n\n    // Get the context\n    const { setClearChatFunction, setOpenSettingsFunction } = useContext(LayoutContext);\n\n    // Register the functions with the Layout component\n    useEffect(() => {\n        // Register the functions when the component mounts\n        if (setClearChatFunction) {\n            setClearChatFunction(() => clearChat);\n        }\n\n        if (setOpenSettingsFunction) {\n            setOpenSettingsFunction(() => () => setIsConfigPanelOpen(true));\n        }\n\n        // Cleanup when unmounting\n        return () => {\n            if (setClearChatFunction) setClearChatFunction(() => {});\n            if (setOpenSettingsFunction) setOpenSettingsFunction(() => {});\n        };\n    }, [setClearChatFunction, setOpenSettingsFunction]); // Don't include clearChat in dependencies\n\n    return (\n        <div className={styles.container}>\n            <Helmet>\n                <title>{t(\"pageTitle\")}</title>\n            </Helmet>\n\n            {((useLogin && showChatHistoryCosmos) || showChatHistoryBrowser) && (\n                <div className={styles.historyButtonContainer}>\n                    <HistoryButton onClick={() => setIsHistoryPanelOpen(!isHistoryPanelOpen)} />\n                </div>\n            )}\n\n            {showUserUpload && (\n                <div className={styles.uploadButtonContainer}>\n                    <UploadFile disabled={!loggedIn} />\n                </div>\n            )}\n\n            <div className={styles.chatRoot} style={{ marginLeft: isHistoryPanelOpen ? \"100px\" : \"0\" }}>\n                <div className={styles.chatContainer}>\n                    {!lastQuestionRef.current ? (\n                        <>\n                            <div className={styles.headerInputContainer}>\n                                {/* <h1 className={styles.companyName}>TRIAS</h1> */}\n                                <h1 className={styles.mainHeader}>\n                                    <span className={styles.unifiedGradient}>\n                                        Ihr medizinischer{\" \"}\n                                        <TypewriterEffect\n                                            phrases={[\n                                                \"Leitlinien-Experte\",\n                                                \"Arztbrief-Assistent\",\n                                                \"Diagnosen-Spezialist\",\n                                                \"Forschungs-Mitarbeiter\",\n                                                \"Praxis-Berater\"\n                                            ]}\n                                        />\n                                    </span>\n                                </h1>\n\n                                {/* Temporarily hiding the subtitle \n                                <h2 className={styles.subHeader}>{t(\"chatEmptyStateSubtitle\")}</h2>\n                                */}\n\n                                <div className={styles.inputContainer}>\n                                    <QuestionInput\n                                        clearOnSend\n                                        placeholder={t(\"defaultExamples.placeholder\")}\n                                        disabled={isLoading}\n                                        onSend={question => makeApiRequest(question)}\n                                        showSpeechInput={showSpeechInput}\n                                    />\n                                </div>\n                            </div>\n\n                            <div className={styles.examplesContainer}>\n                                <div className={styles.examplesWrapper}>\n                                    {showLanguagePicker && <LanguagePicker onLanguageChange={newLang => i18n.changeLanguage(newLang)} />}\n                                    <ExampleList onExampleClicked={onExampleClicked} useGPT4V={useGPT4V} />\n                                </div>\n                            </div>\n\n                            {/* Add the logos container below the examples */}\n                            <div className={styles.logosContainer}>\n                                <div className={styles.logosWrapper}>\n                                    <img src={awmfLogo} alt=\"AWMF Logo\" className={styles.partnerLogo} />\n                                    <img src={baekLogo} alt=\"Bundesärztekammer Logo\" className={styles.partnerLogo} />\n                                    <img src={kbvLogo} alt=\"KBV Logo\" className={styles.partnerLogo} />\n                                </div>\n                            </div>\n                        </>\n                    ) : (\n                        <>\n                            <div className={styles.chatMessageStream}>\n                                {isStreaming &&\n                                    streamedAnswers.map((streamedAnswer, index) => (\n                                        <div key={index}>\n                                            <UserChatMessage message={streamedAnswer[0]} />\n                                            <div className={styles.chatMessageGpt}>\n                                                <Answer\n                                                    isStreaming={true}\n                                                    key={index}\n                                                    answer={streamedAnswer[1]}\n                                                    index={index}\n                                                    speechConfig={speechConfig}\n                                                    isSelected={false}\n                                                    onCitationClicked={c => onShowCitation(c, index)}\n                                                    onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                    onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                                    showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\n                                                    showSpeechOutputAzure={showSpeechOutputAzure}\n                                                    showSpeechOutputBrowser={showSpeechOutputBrowser}\n                                                />\n                                            </div>\n                                        </div>\n                                    ))}\n                                {!isStreaming &&\n                                    answers.map((answer, index) => (\n                                        <div key={index}>\n                                            <UserChatMessage message={answer[0]} />\n                                            <div className={styles.chatMessageGpt}>\n                                                <Answer\n                                                    isStreaming={false}\n                                                    key={index}\n                                                    answer={answer[1]}\n                                                    index={index}\n                                                    speechConfig={speechConfig}\n                                                    isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\n                                                    onCitationClicked={c => onShowCitation(c, index)}\n                                                    onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                    onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                                    showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\n                                                    showSpeechOutputAzure={showSpeechOutputAzure}\n                                                    showSpeechOutputBrowser={showSpeechOutputBrowser}\n                                                />\n                                            </div>\n                                        </div>\n                                    ))}\n                                {isLoading && (\n                                    <>\n                                        <UserChatMessage message={lastQuestionRef.current} />\n                                        <div className={styles.chatMessageGptMinWidth}>\n                                            <AnswerLoading />\n                                        </div>\n                                    </>\n                                )}\n                                {error ? (\n                                    <>\n                                        <UserChatMessage message={lastQuestionRef.current} />\n                                        <div className={styles.chatMessageGptMinWidth}>\n                                            <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                                        </div>\n                                    </>\n                                ) : null}\n                                <div ref={chatMessageStreamEnd} />\n                            </div>\n\n                            <div\n                                className={styles.chatInput}\n                                style={{\n                                    width: activeAnalysisPanelTab ? \"46%\" : \"100%\",\n                                    left: activeAnalysisPanelTab ? \"25%\" : \"50%\",\n                                    marginBottom: \"40px\"\n                                }}\n                            >\n                                <QuestionInput\n                                    clearOnSend\n                                    placeholder={t(\"defaultExamples.placeholder\")}\n                                    disabled={isLoading}\n                                    onSend={question => makeApiRequest(question)}\n                                    showSpeechInput={showSpeechInput}\n                                />\n                            </div>\n\n                            {lastQuestionRef.current && (\n                                <div\n                                    className={styles.disclaimerText}\n                                    style={{\n                                        position: \"fixed\",\n                                        bottom: \"22px\",\n                                        width: activeAnalysisPanelTab ? \"46%\" : \"55%\",\n                                        left: activeAnalysisPanelTab ? \"25%\" : \"50%\",\n                                        transform: \"translateX(-50%)\",\n                                        textAlign: \"center\",\n                                        padding: \"0 20px\",\n                                        fontSize: \"0.65rem\",\n                                        zIndex: 10,\n                                        borderRadius: \"4px\"\n                                    }}\n                                >\n                                    <span>\n                                        Entwickelt vom Fächerverbund Infektiologie, Pneumologie und Intensivmedizin der Charité für Forschungszwecke. Dieses\n                                        Programm erfüllt NICHT die Anforderungen an Datenschutz und medizinische Software. Wir übernehmen keine Haftung für\n                                        Inhalte oder daraus entstandene Schäden.\n                                    </span>\n                                </div>\n                            )}\n                        </>\n                    )}\n                </div>\n\n                {answers.length > 0 && activeAnalysisPanelTab && (\n                    <AnalysisPanel\n                        className={styles.chatAnalysisPanel}\n                        activeCitation={activeCitation}\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\n                        citationHeight=\"810px\"\n                        answer={answers[selectedAnswer][1]}\n                        activeTab={activeAnalysisPanelTab}\n                    />\n                )}\n\n                {((useLogin && showChatHistoryCosmos) || showChatHistoryBrowser) && (\n                    <HistoryPanel\n                        provider={historyProvider}\n                        isOpen={isHistoryPanelOpen}\n                        notify={!isStreaming && !isLoading}\n                        onClose={() => setIsHistoryPanelOpen(false)}\n                        onChatSelected={answers => {\n                            if (answers.length === 0) return;\n                            setAnswers(answers);\n                            lastQuestionRef.current = answers[answers.length - 1][0];\n                        }}\n                    />\n                )}\n\n                <Panel\n                    headerText={t(\"labels.headerText\")}\n                    isOpen={isConfigPanelOpen}\n                    isBlocking={false}\n                    onDismiss={() => setIsConfigPanelOpen(false)}\n                    closeButtonAriaLabel={t(\"labels.closeButton\")}\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>{t(\"labels.closeButton\")}</DefaultButton>}\n                    isFooterAtBottom={true}\n                >\n                    <Settings\n                        promptTemplate={promptTemplate}\n                        temperature={temperature}\n                        retrieveCount={retrieveCount}\n                        seed={seed}\n                        minimumSearchScore={minimumSearchScore}\n                        minimumRerankerScore={minimumRerankerScore}\n                        useSemanticRanker={useSemanticRanker}\n                        useSemanticCaptions={useSemanticCaptions}\n                        excludeCategory={excludeCategory}\n                        includeCategory={includeCategory}\n                        retrievalMode={retrievalMode}\n                        useGPT4V={useGPT4V}\n                        gpt4vInput={gpt4vInput}\n                        vectorFieldList={vectorFieldList}\n                        showSemanticRankerOption={showSemanticRankerOption}\n                        showGPT4VOptions={showGPT4VOptions}\n                        showVectorOption={showVectorOption}\n                        useOidSecurityFilter={useOidSecurityFilter}\n                        useGroupsSecurityFilter={useGroupsSecurityFilter}\n                        useLogin={!!useLogin}\n                        loggedIn={loggedIn}\n                        requireAccessControl={requireAccessControl}\n                        shouldStream={shouldStream}\n                        useSuggestFollowupQuestions={useSuggestFollowupQuestions}\n                        showSuggestFollowupQuestions={true}\n                        onChange={handleSettingsChange}\n                    />\n                    {useLogin && <TokenClaimsDisplay />}\n                </Panel>\n            </div>\n        </div>\n    );\n};\n\nexport default Chat;\n","import { AccountInfo, EventType, PublicClientApplication } from \"@azure/msal-browser\";\nimport { checkLoggedIn, msalConfig, useLogin } from \"./authConfig\";\nimport { useEffect, useState } from \"react\";\nimport { MsalProvider } from \"@azure/msal-react\";\nimport { LoginContext } from \"./loginContext\";\nimport Layout from \"./pages/layout/Layout\";\n\nconst LayoutWrapper = () => {\n    const [loggedIn, setLoggedIn] = useState(false);\n    if (useLogin) {\n        var msalInstance = new PublicClientApplication(msalConfig);\n\n        // Default to using the first account if no account is active on page load\n        if (!msalInstance.getActiveAccount() && msalInstance.getAllAccounts().length > 0) {\n            // Account selection logic is app dependent. Adjust as needed for different use cases.\n            msalInstance.setActiveAccount(msalInstance.getActiveAccount());\n        }\n\n        // Listen for sign-in event and set active account\n        msalInstance.addEventCallback(event => {\n            if (event.eventType === EventType.LOGIN_SUCCESS && event.payload) {\n                const account = event.payload as AccountInfo;\n                msalInstance.setActiveAccount(account);\n            }\n        });\n\n        useEffect(() => {\n            const fetchLoggedIn = async () => {\n                setLoggedIn(await checkLoggedIn(msalInstance));\n            };\n\n            fetchLoggedIn();\n        }, []);\n\n        return (\n            <MsalProvider instance={msalInstance}>\n                <LoginContext.Provider\n                    value={{\n                        loggedIn,\n                        setLoggedIn\n                    }}\n                >\n                    <Layout />\n                </LoginContext.Provider>\n            </MsalProvider>\n        );\n    } else {\n        return (\n            <LoginContext.Provider\n                value={{\n                    loggedIn,\n                    setLoggedIn\n                }}\n            >\n                <Layout />\n            </LoginContext.Provider>\n        );\n    }\n};\n\nexport default LayoutWrapper;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\nimport { I18nextProvider } from \"react-i18next\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport { initializeIcons } from \"@fluentui/react\";\n\nimport \"./index.css\";\n\nimport Chat from \"./pages/chat/Chat\";\nimport LayoutWrapper from \"./layoutWrapper\";\nimport i18next from \"./i18n/config\";\n\ninitializeIcons();\n\nconst router = createHashRouter([\n    {\n        path: \"/\",\n        element: <LayoutWrapper />,\n        children: [\n            {\n                index: true,\n                element: <Chat />\n            },\n            {\n                path: \"*\",\n                lazy: () => import(\"./pages/NoPage\")\n            }\n        ]\n    }\n]);\n\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\n    <React.StrictMode>\n        <I18nextProvider i18n={i18next}>\n            <HelmetProvider>\n                <RouterProvider router={router} />\n            </HelmetProvider>\n        </I18nextProvider>\n    </React.StrictMode>\n);\n"],"file":"assets/index-CEppCDw0.js"}